{
    "noteq":
    {"prefix":["/="],"body":"(/=${0}) ",
        "params":[],
        "description":"(/= numstr [numstr] ) \n比较参数是否值不相等 "},
    "mul":{"prefix":["*error*"],"body":"(*error* string) ",
        "params":[],
        "description":"(*error* string) \n可由用户定义的错误处理函数"},
    "-":{"prefix":["- (减)"],"body":"(-$0)",
        "params":[
            {"label":"number1","doc":"被减数"},
            {"label":"number2","doc":"减数"}
        ],
        "description":"(- [number number] )\n将第一个数减去其他数的和并返回差值"},
    "1-":{"prefix":["1- (减 1)"],"body":"(1-$0)",
        "params":[{"label":"number","doc":"数字"}],
        "description":"(1– number)\n将参数减 1"},
    
    "+":{"prefix":["+ (加)"],"body":"(+$0)",
        "params":[{"label":"number1","doc":"数字"},{"label":"number2","doc":"数字"}],
        "description":"(+ [number number] ... )\n返回所有数的和"},
    "1+":{"prefix":["1+ (增 1)"],"body":"(1+${0}) ",
        "params":[
            {"label":"number","doc":"任意数字"}
        ],
        "description":"(1+ number) \n将参数加 1"},
    
    ">":{"prefix":["> (大于)"],"body":"(>${0}) ",
        "params":[
            {"label":"numstr","doc":"数字或字符串"},
            {"label":"numstr","doc":"数字或字符串"}
        ],
        "description":"(> numstr [numstr] ) \n如果每个参数值都大于它右边的参数则返回 T，否则返回 nil "},
    ">=":{"prefix":[">= (大于或等于) "],"body":"(>=$0)",
        "params":[
            {"label":"numstr","doc":"数字或字符串"},
            {"label":"numstr","doc":"数字或字符串"}
        ],
        "description":"(>= numstr [numstr...] ) \n如果每个参数值都大于或等于它右边的参数则返回 T，否则返回 nil  "},
    "<":{"prefix":["< (小于) "],"body":"(<${0}) ",
        "params":[
            {"label":"numstr","doc":"数字或字符串"},
            {"label":"numstr","doc":"数字或字符串"}
        ],
        "description":"(< numstr [numstr...] ) \n如果每个参数值都小于它右边的参数则返回 T，否则返回 nil  "},
    "<=":{"prefix":["<= (小于或等于)"],"body":"(<=${0})",
        "params":[
            {"label":"numstr","doc":"数字或字符串"},
            {"label":"numstr","doc":"数字或字符串"}
        ],
        "description":"(<= numstr [numstr...] )\n如果每个参数值都小于或等于它右边的参数则返回 T，否则返回 nil "},
    "~":{"prefix":["~ (按位非) "],"body":"(~${0})",
        "params":[
            {"label":"int","doc":"正整数或负整数"}
        ],
        "description":"(~ int)\n返回参数的按位非（即 1 的补码）"},
    "=":{"prefix":["= (等于) "],"body":"(=$0) ",
        "params":[
            {"label":"1numstr","doc":"数字或字符串"},
            {"label":"2numstr","doc":"数字或字符串"}
        ],
        "description":"(= 1numstr [2numstr...] ) \n比较参数是否相等"},
    
    "/":{"prefix":["/ (除)"],"body":"(/$0) ",
        "params":[
            {"label":"numstr","doc":"数字或字符串"},
            {"label":"numstr","doc":"数字或字符串"}
        ],
        "description":"(/ [number number...] ) \n将第一个数除以其他数的乘积并返回商"},
    "abs":{"prefix":["abs"],"body":"(abs$0)",
        "params":[
            {"label":"number","doc":"数字"}
        ],
        "description":"(abs number)\n返回参数的绝对值"},
    "acad-pop-dbmod":{"prefix":["acad-pop-dbmod"],"body":"(acad-pop-dbmod)$0",

        "description":"(acad-pop-dbmod)\n恢复 DBMOD 系统变量的值到最近用 acad-push-dbmod   \n保存的值"},
    "acad-push-dbmod":{"prefix":["acad-push-dbmod"],"body":"(acad-push-dbmod)$0",

        "description":"(acad-push-dbmod)\n储存 DBMOD 系统变量的当前值"},"acad_colordlg":{"prefix":["acad_colordlg"],"body":"(acad_colordlg$0)",
        "params":[],
        "description":"(acad_colordlg colornum [flag])\n显示标准的 AutoCAD 颜色选择对话框"},
    "acad_helpdlg":{"prefix":["acad_helpdlg"],"body":"(acad_helpdlg$0) ",
        "description":"(acad_helpdlg helpfile topic) \n启动帮助工具（已废弃）"},
        "acad_strlsort":{"prefix":["acad_strlsort"],"body":"(acad_strlsort$0) ",
        "params":[],
        "description":"(acad_strlsort list) \n以ASCII码字母顺序对字符串表进行排序"},
    "Acad_TrueColorCli":{"prefix":["Acad_TrueColorCli"],"body":"(acad_truecolorcli$0)",
        "params":[],
        "description":"(acad_truecolorcli color [allowbylayer] [alternatePrompt])\n从命令行中选择 AutoCAD 真彩色"},
    "Acad_TrueColorDlg":{"prefix":["Acad_TrueColorDlg"],"body":"(acad_truecolordlg$0)",
        "params":[],
        "description":"(acad_truecolordlg color [allowbylayer] [currentlayercolor])\n显示 AutoCAD 真彩色选择对话框"},
    "acdimenableupdate":{"prefix":["acdimenableupdate"],"body":"(acdimenableupdate$0) ",
        "params":[],
        "description":"(acdimenableupdate nil | T) \n控制关联标注的自动更新"},
    "acet-layerp-mark":{"prefix":["acet-layerp-mark"],"body":"(acet-layerp-mark status)",
        "params":[
            {"label":"status","doc":"指定 T 以设置开始标记。指定 nil 以设置结束标记，并清除开始标记。\n如果忽略 status , acet-layerp-mark r返回图形设置的当前标记状态。"}
        ],
        "description":"(acet-layerp-mark [status])\n放置图层先前记录的开始和结束标记"},
    "acet-layerp-mode":{"prefix":["acet-layerp-mode"],"body":"(acet-layerp-mode$0)",
        "params":[
            {"label":"status","doc":"指定 T 即打开 LAYERPMODE ，此时启用图层修改跟踪。 Nil 即关闭 LAYERPMODE 。\n如果不提供该参数，acet-layerp-mode 返回 LAYERPMODE 的当前状态。"}
        ],
        "description":"(acet-layerp-mode [status])\n查询和设置 LAYERPMODE 配置"},
    "acet-laytrans":{"prefix":["acet-laytrans"],"body":"(acet-laytrans$0)",
        "params":[
            {"label":"filename","doc":"字符串，指定包含用于转换的图层映射的文件"},
            {"label":"settings","doc":"位码整数，指定图层转换过程选项。位码可任意组合累加，值在0-15之间。如果忽略 settings 参数，则缺省为值 15 (即使用了所有选项)。位码值如下：\n0 无选项\n1 强制图元颜色为“随层”\n2 强制图元线型为“随层”\n4 转换块中的对象\n8 记录转换日志"}
        ],
        "description":"(acet-laytrans “filename” [settings])\n转换图形中的图层为其它图形或标准文件中所定义的标准"},
    "acet-ms-to-ps":{"prefix":["acet-ms-to-ps"],"body":"(acet-ms-to-ps$0)",
        "params":[
            {"label":"value","doc":"要转换的实数值。"},
            {"label":"viewport","doc":"视口图元名称(ads_name)。"}
        ],
        "description":"(acet-ms-to-ps [value][viewport])  \n从模型空间单位转换实数值到图纸空间单位"},
    "acet-ps-to-ms":{"prefix":["acet-ps-to-ms"],"body":"(acet-ps-to-ms$0)",
        "params":[
            {"label":"value","doc":"要转换的实数值。"},
            {"label":"viewport","doc":"视口图元名称(ads_name)。"}
        ],
        "description":"(acet-ps-to-ms [value][viewport])\n从图纸空间单位转换实数值到模型空间单位"},
    "action_tile":{"prefix":["action_tile"],"body":"(action_tile$0)",
        "params":[
            {"label":"kye","doc":"要触发动作的控件的操作名字符串（由控件的 key 属性指定），它是区分大小写的。"},
            {"label":"action-expression","doc":"指定选定控件时所要求值的动作表达式的字符串。"}
        ],
        "description":"(action_tile key action-expression)\n为某一对话框控件指定一个动作表达式，用户在对话框中选中这个控件时，就会执行该动作表达式"},
    "add_list":{"prefix":["add_list"],"body":"(add_list$0)",
        "params":[
            {"label":"string","doc":"字符串"}
        ],
    "description":"(add_list string)\n在当前激活的对话框的列表框中增加一个字符串或修改其中的一个字符串"},
    "alert":{"prefix":["alert"],"body":"(alert$0) ",
        "params":[
            {"label":"string","doc":"字符串,要显示的消息"}
        ],
        "description":"(alert string) \n显示一个警告框，其中显示一条出错或警告信息"},
    "alloc":{"prefix":["alloc"],"body":"(alloc$0)",
        "params":[
            {"label":"n-alloc","doc":"整数型，指定要分配的内存的数量。该整数表示符号、字符串、usubr、实数和 Cons 单元的数目。"}
        ],
        "description":"(alloc n-alloc)\n设置段长度以供 expand 函数使用"},
    "and":{"prefix":["and"],"body":"(and$0)",
        "params":[
            {"label":"expr","doc":"任意表达式"}
        ],
        "description":"(and [expr ...])\n返回表达式的逻辑与 (AND) 运算结果"},
    "angle":{"prefix":["angle"],"body":"(angle$0) ",
        "params":[
            {"label":"pt1","doc":"端点"},
            {"label":"pt2","doc":"端点"}
        ],
        "description":"(angle pt1 pt2) \n以弧度为单位返回两点之间连线与当前 UCS 下 X 轴之间的夹角"},
    "angtof":{"prefix":["angtof"],"body":"(angtof$0)",
        "params":[
            {"label":"string","doc":"以 unit 参数指定的格式描述角度的字符串。string 必须是能够由 angtof 函数根据指定的 unit 参数进行正确分析的一个字符串。参数 string 的格式，既可以与 angtos 函数返回结果的格式相同，也可以是 AutoCAD 允许从键盘输入的角度格式。"},
            {"label":"units","doc":"用于指定角度字符串格式单位的参数。该参数的取值应与 AutoCAD 的系统变量 AUNITS 的允许取值对应，如果省略该参数，本函数将使用 AUNITS 的当前值。units 参数可指定为如下值：\n0 （十进制）度\n1 度/分/秒\n2 百分度\n3 弧度\n4 勘测单位"}
        ],
        "description":"(angtof string [units])\n将表示角度的字符串转换为实数（浮点数）形式的弧度值"},
    "angtos":{"prefix":["angtos"],"body":"(angtos$0) ",
        "params":[
            {"label":"angle","doc":"以弧度为单位表示角度的实数值"},
            {"label":"unit","doc":"指定角度单位的整数。如果省略参数 unit，函数将使用系统变量 AUNITS 的当前值。units 参数可指定为如下值：\n0 （十进制）度\n1 度/分/秒\n2 百分度\n3 弧度\n4 勘测单位"},
            {"label":"precision","doc":"用于指定返回精度所需的小数位数的整数。如果省略该参数，函数将使用系统变量 AUPREC 的当前值。"}
        ],
        "description":"(angtos angle [unit [precision]]) \n将一个以弧度为单位的角度值转换成字符串"},
    "append":{"prefix":["append"],"body":"(append${0})",
        "params":[
            {"label":"list","doc":"表"}
        ],
        "description":"(append [list ...])\n将任意多个表组合成一个表"},
    "apply":{"prefix":["apply"],"body":"(apply${0})",
        "params":[
            {"label":"function","doc":"函数，可以是表示 defun 或 lambda 表达式的符号。"},
            {"label":"list","doc":"表。如果函数不接收参数，则该参数为 nil。"}
        ],
        "description":"(apply ’function list)\n将参数表传给指定的函数"},
    "arx":{"prefix":["arx"],"body":"(arx)${0}",
        "params":[],
        "description":"(arx) \n返回当前已加载的 ObjectARX 应用程序名表"},
    "arxload":{"prefix":["arxload"],"body":"(arxload${0}) ",
        "params":[
            {"label":"application","doc":"用双引号引起来的字符串，或包含可执行文件名的变量。可以省略文件名中的后缀 .arx。\n必须提供 ObjectARX 可执行文件的全路径名，除非该文件是在 AutoCAD 支持文件搜索路径中。"},
            {"label":"onfailure","doc":"加载失败时要执行的表达式。"}
        ],
        "description":"(arxload application [onfailure]) \n加载 ObjectARX 应用程序"},
    "arxunload":{"prefix":["arxunload"],"body":"(arxunload${0}) ",
        "params":[
            
            {"label":"application","doc":"用双引号引起来的字符串或包含已用 arxload 函数加载的可执行文件名的变量。可以省略文件名中的 .arx 后缀和路径。 "},
            {"label":"onfailure","doc":"加载失败时要执行的表达式。"}
            
        ],
        "description":"(arxunload application [onfailure]) \n卸载 ObjectARX 应用程序"},
    "ascii":{"prefix":["ascii"],"body":"(ascii${0})",
        "params":[
            {"label":"string","doc":"字符串"}
        ],
        "description":"(ascii string)\n将字符串中的第一个字符转换成其 ASCII \n码(整数)后返回"},
    "assoc":{"prefix":["assoc"],"body":"(assoc${0})",
        "params":[
            {"label":"element","doc":"关联表中的键元素"},
            {"label":"alist","doc":"要搜索的关联表。"}
        ],
        "description":"(assoc element alist)\n从关联表中搜索一个元素，如果找到则返回该关联表条目"},
    "atan":{"prefix":["atan"],"body":"(atan${0}) ",
        "params":[
            {"label":"num1","doc":"数值"},
            {"label":"[num2]","doc":"数值"}
        ],
        "description":"(atan num1 [num2]) \n如果仅提供一个参数 num1，本函数返回数 num1 的以弧度为单位的反正切值。如果提供了两个参数 num1 和 num2，本函数返回 num1/num2 的以弧度为单位的反正切值。如果 num2 为 0，该函数返回正的或负的 1.570796 弧度（+90 度或 -90 度），其正负取决于 num1 的正负。该函数返回的角度的范围是 -pi/2 至 +pi/2（弧度）。"},
    "atof":{"prefix":["atof"],"body":"(atof${0}) ",
        "params":[
            {"label":"string","doc":"要转化为实数的字符串"}
        ],
        "description":"(atof string) \n将一个字符串转换成实数"},
    "atoi":{"prefix":["atoi"],"body":"(atoi${0}) ",
        "params":[
            {"label":"string","doc":"要转换为整数的字符串"}
        ],
        "description":"(atoi string) \n将一个字符串转换成整数"},
    "atom":{"prefix":["atom"],"body":"(atom${0})",
        "params":[
            {"label":"item","doc":"任意 AutoLISP 项。\n某些版本的 LISP 对 atom（原子）的解释有些不同，所以在使用移植的代码时应加以注意。"}
        ],
        "description":"(atom item)\n验证一个项是否是原子"},
    "atoms-family":{"prefix":["atoms-family"],"body":"(atoms-family${0}) ",
        "params":[
            {"label":"format","doc":"值为 0 或 1 的整数，它用于指定 atoms-family 函数返回符号名的格式：  \n0 以表的形式返回符号名  \n1 以字符串表的形式返回符号名"},
            {"label":"[symlist]","doc":"用于指定用户想搜索的符号名的字符串表。"}
        ],
        "description":"(atoms-family format [symlist]) \n返回由当前已定义的符号组成的一个表"},
    "autoarxload":{"prefix":["autoarxload"],"body":"(autoarxload${0})",
        "params":[
            {"label":"filename","doc":"指定在命令提示下输入 cmdlist 参数中定义的某个命令时要加载的 .arx 文件的字符串。如果省略路径名，AutoCAD 将在支持文件搜索路径中查找该文件。"},
            {"label":"cmdlist","doc":"字符串列表"}
        ],
        "description":"(autoarxload filename cmdlist)\n预定义可自动加载某相关 ObjectARX 应用程序的命令名"},
    "autoload":{"prefix":["autoload"],"body":"(autoload${0})",
        "params":[
            {"label":"filename","doc":"指定在命令提示下输入 cmdlist 参数中定义的某个命令时要加载的 .lsp 文件的字符串。如果省略路径名，AutoCAD 将在支持文件搜索路径中查找该文件"},
            {"label":"cmdlist","doc":"字符串列表"}
        ],
        "description":"(autoload filename cmdlist)\n预定义可自动加载某相关 AutoLISP 应用程序的命令名"},
    "Boole":{"prefix":["Boole"],"body":"(Boole${0}) ",
        "params":[
            {"label":"operator","doc":"0 和 15 之间的整数，代表 16 种可能的双变量布尔函数。"},
            {"label":"int1","doc":"整数"},
            {"label":"[int2]","doc":"整数"}
        ],
        "description":"(Boole operator int1 [int2 ...]) \n用作一个通用的按位逻辑运算函数"},
    "boundp":{"prefix":["boundp"],"body":"(boundp${0}) ",
        "params":[
            {"label":"sym","doc":"符号"}
        ],
        "description":"(boundp sym) \n检验符号是否被设置为某个值  \n如果参数 sym 已被设置为非 nil 值，该函数返回 T。如果没有设置 sym 或它被设置为 nil，本函数返回 nil。如果 sym 是一个未定义的符号，则自动创建它，并将其设为 nil。"},
    "caddr":{"prefix":["caddr"],"body":"(caddr${0})",
        "params":[
            {"label":"list","doc":"列表"}
        ],
        "description":"(caddr list)\n返回表的第三个元素.如果表为空或元素个数少于三个则返回 nil"},
    "cadr":{"prefix":["cadr"],"body":"(cadr${0})",
        "params":[
            {"label":"list","doc":"列表"}
        ],
        "description":"(cadr list)\n返回表的第二个元素"},
    "car":{"prefix":["car"],"body":"(car${0})",
        "params":[
            {"label":"list","doc":"列表"}
        ],
        "description":"(car list)\n返回表的第一个元素"},
    "cdr":{"prefix":["cdr"],"body":"(cdr${0})",
        "params":[{"label":"list","doc":"列表"}],
        "description":"(cdr list)\n返回去掉了第一个元素的表"},
    "chr":{"prefix":["chr"],"body":"(chr${0}) ",
        "params":[
            {"label":"integer","doc":"列表"}
        ],
        "description":"(chr integer) \n将代表字符 ASCII 码的整数转换成包含相应的单一字符的字符串  \n返回值为包含 ASCII 码为 integer 的字符的字符串。如果整数值不在 1-255 范围内，返回的结果不可预料"},
    "client_data_tile":{"prefix":["client_data_tile"],"body":"(client_data_tile${0})",
        "params":[
            {"label":"key","doc":"指定控件操作名的字符串，区分大小写"},
            {"label":"clientdata","doc":"设置 key 控件中的应用数据字符串，动作表达式或回调函数可以通过 $data 变量引用它"}
        ],
        "description":"(client_data_tile key clientdata)\n将特定应用数据与一个对话框控件相关联"},
    "close":{"prefix":["close"],"body":"(close${0}) ",
        "params":[
            {"label":"file-desc","doc":"在 open 函数打开文件时获得的文件描述符。"}
        ],
        "description":"(close file-desc) \n关闭一个已打开的文件"},
    "command":{"prefix":["command"],"body":"(command${0})",
        "params":[
            {"label":"[arguments]","doc":"AutoCAD 命令、选项或表达式。  \ncommand 函数的参数可以是字符串、实数、整数或点，但必须与要执行的命令所需的参数一致。空字符串 (\"\") 表示从键盘键入 ENTER 键。不带参数调用 command 相当于键入 ESC 键，这样可取消大多数 AutoCAD 命令。  \ncommand 函数将每一个参数顺序传给 AutoCAD 以响应提示。它以字符串形式提交命令名和选项；以两个实数组成的表的形式提交二维点；以三个实数组成的表的形式提交三维点。只有在命令提示下 AutoCAD 才能识别命令名。要注意的是，如果从 Visual LISP 中使用 command 函数，控制并不会转移到 AutoCAD 中。如果命令要求用户输入，则可以在控制台窗口中看到返回结果 (nil)，但 AutoCAD 将等待输入，必须手动激活 AutoCAD 并响应提示。在这样做以前，任何后续命令都会失败。"}
        ],
        "description":"(command [arguments] ...)\n执行一条 AutoCAD 命令"},
    "cond":{"prefix":["cond"],"body":"(cond (test result ) ) ",
        "params":[
            {"label":"(test result)","doc":"列表，test是用于条件判断的表达式，result是test为真时要执行的表达式"}
        ],
        "description":"(cond [(test result ...) ...]) \n多条件、多处理结果函数  \ncond 函数的参数可以为任意数目的表。它按顺序对每一个表的第一项求值，直到其中之一的返回值不是 nil 为止。该函数接着对该项后续的其他表达式求值。",
        "docurl":"https://help.autodesk.com/view/OARX/2019/ENU/?guid=GUID-7BA45202-D95F-4F2D-8D83-965024826074"
    },
    "cons":{"prefix":["cons"],"body":"(cons${0}) ",
        "params":[
            {"label":"new-first-element","doc":"要添加到表开始的元素。该元素可以为原子或表"},
            {"label":"list-or-atom","doc":"表或原子"}
        ],
        "description":"(cons new-first-element list-or-atom) \n向表的头部添加一个元素，或构造一个点对"},
    "cos":{"prefix":["cos"],"body":"(cos${0})",
        "params":[
            {"label":"ang","doc":"按弧度表示的角度值"}
        ],
        "description":"(cos ang)\n返回弧度角度的余弦值"},
    "cvunit":{"prefix":["cvunit"],"body":"(cvunit${0}) ",
        "params":[
            {"label":"value","doc":"要换算的数值或点表（二维或三维点）。"},
            {"label":"from-unit","doc":"value 原来使用的单位"},
            {"label":"to-unit","doc":"value 将要使用的单位"}
        ],
        "description":"(cvunit value from-unit to-unit) \n在不同测量单位之间进行换算"},
    "defun-q-list-ref":{"prefix":["defun-q-list-ref"],"body":"(defun-q-list-ref${0}) ",
        "params":[
            {"label":"'function","doc":"用于命名函数的符号"}
        ],
        "description":"(defun-q-list-ref 'function ) \n返回用 defun-q 定义的函数的表结构"},
    "defun-q-list-set":{"prefix":["defun-q-list-set"],"body":"(defun-q-list-set${0})",
        "params":[
            {"label":"'sym","doc":"命名函数的符号"},
            {"label":"list","doc":"由函数中要包含的表达式组成的表"}
        ],
        "description":"(defun-q-list-set 'sym list)\n将符号设置为以表形式定义的函数"},
    "defun-q":{"prefix":["defun-q"],"body":"(defun-q sym (arguments / variables) expr...) ",
        "params":[
            {"label":"sym","doc":"命名函数的符号"},
            {"label":"arguments","doc":"命名函数的符号"},
            {"label":"variables","doc":"命名函数的符号"},
            {"label":"expr","doc":"命名函数的符号"}
        ],
        "description":"(defun-q sym ([arguments] [/ variables...]) expr...) \n将函数定义为表"},
    "defun":{"prefix":["defun"],"body":"(defun$0) ",
        "params":[
            {"label":"sym","doc":"函数名"},
            {"label":"([arguments] [/ variables...])","doc":"arguments  \n函数需要的形式参数名。  \n/ variables  \n函数使用的一个或多个局部变量名。  \n局部变量名称前的斜线和第一个局部名称之间，以及该斜线和最后一个参数（如果存在的话）之间，都必须保持至少一个空格的距离。"},
            
            {"label":"expr","doc":"执行函数时要执行的任意数目 AutoLISP 表达式"}
        ],
        "description":"(defun sym ([arguments] [/ variables...]) expr...)  \n定义函数  \n如果没有声明任何参数或局部符号，则在函数名称后必须使用空括号。  \n如果指定了重复的参数或符号名称，AutoLISP 使用第一个出现的名称，而忽略其他的名称"},
    "dictadd ":{"prefix":["dictadd "],"body":"(dictadd$0)",
        "params":[
            {"label":"ename","doc":"要添加对象的词典名称。"},
            {"label":"symbol","doc":"添加到词典中的对象的关键字。symbol 必须为唯一名称，且不能与词典中现有的关键词重复"},
            
            {"label":"newobj","doc":"要添加到词典中的非图形对象"}
        ],
        "description":"(dictadd ename symbol newobj)\n在指定词典内添加非图形对象"},
    "dictnext ":{"prefix":["dictnext "],"body":"(dictnext${0})",
        "params":[
            {"label":"ename","doc":"词典名称"},
            {"label":"[rewind]","doc":"如果参数存在且不为 nil，则词典将被回绕，该函数将检索词典中的第一个条目"}
        ],
        "description":"(dictnext ename [rewind])\n查找词典中的下一个条目"},
        "dictremove ":{"prefix":["dictremove "],"body":"(dictremove${0})",
        "params":[
            {"label":"ename","doc":"被修改的词典的名称"},
            {"label":"symbol","doc":"要从 ename 中删除的条目"}
        ],
        "description":"(dictremove ename symbol)\n从指定词典中删除一个条目"},
    "dictrename ":{"prefix":["dictrename "],"body":"(dictrename${0})",
        "params":[
            {"label":"ename","doc":"被修改的词典的名称"},
            {"label":"oldsym","doc":"条目旧关键字"},
            {"label":"newsym","doc":"条目的新关键字"}
        ],
        "description":"(dictrename ename oldsym newsym)\n重命名词典条目"},
    "dictsearch ":{"prefix":["dictsearch "],"body":"(dictsearch${0})",
        "params":[
            {"label":"ename","doc":"要搜索的词典的名称"},
            {"label":"oldsym","doc":"字符串，指定词典中要搜索的条目"},
            {"label":"[setnext]","doc":"如果存在且非 nil，则调整 dictnext 条目计数器，以使接下来的 dictnext 函数调用此次 dictsearch 调用返回条目的下一个条目"}
        ],
        "description":"(dictsearch ename symbol [setnext])\n在词典中搜索某个项"},
    "dimx_tile":{"prefix":["dimx_tile"],"body":"(dimx_tile$0)",
        "params":[
            {"label":"key","doc":"字符串，指定要查询的控件的操作名。key 参数区分大小写"}
        ],
        "description":"(dimx_tile key)\n返回控件的宽度"},
    "dimy_tile":{"prefix":["dimy_tile"],"body":"(dimy_tile${0})",
        "params":[
            {"label":"key","doc":"字符串，指定要查询的控件的操作名。key 参数区分大小写"}
        ],
        "description":"(dimy_tile key)\n返回控件的高度"},
    "distance":{"prefix":["distance"],"body":"(distance${0})",
        "params":[
            {"label":"pt1","doc":"二维或三维点表"},
            {"label":"pt2","doc":"二维或三维点表"}
        ],
        "description":"(distance pt1 pt2)\n返回两个点之间的距离"},
    "distof":{"prefix":["distof"],"body":"(distof${0})",
        "params":[
            {"label":"string","doc":"要转换的字符串。该参数必须能按 mode 指定的单位由 distof 正确地进行语法分析。它既可以与 rtos 函数返回字符串具有相同的形式，也可以是 AutoCAD 允许的键盘输入格式"},
            {"label":"[mode]","doc":"字符串所用格式的单位，它的值应与 AutoCAD 的系统变量 LUNITS 的允许取值相对应，其取值如下表所示：  \n1 科学  \n2 小数  \n3 工程（英尺和小数英寸）  \n4 建筑（英尺和分数英寸）  \n5 分数"}
        ],
        "description":"(distof string [mode])\n将一个表示实（浮点）数的字符串转换成一个实数"},
    "done_dialog":{"prefix":["done_dialog"],"body":"(done_dialog${0})",
        "params":[
            {"label":"[status]","doc":"由函数 start_dialog 返回的正整数。（否则 start_dialog 函数在选择 OK 时返回 1，而在选择 Cancel 时返回 0）。任何大于 1 的 status 值的含义均取决于应用程序中的用户设定。必须在动作表达式或回调函数中调用 done_dialog"}
        ],
        "description":"(done_dialog [status])\n中断对话框"},
    "end_image":{"prefix":["end_image"],"body":"(end_image)${0}",
        "params":[
        ],
        "description":"(end_image)\n结束当前激活的对话框图像控件的操作"},
    "entdel":{"prefix":["entdel"],"body":"(entdel${0}) ",
        "params":[
            {"label":"ename","doc":"要删除或恢复的图元的名称"}
        ],
        "description":"(entdel ename) \n删除对象（图元）或恢复先前删除的对象"},
    "end_list":{"prefix":["end_list"],"body":"(end_list)${0}",
        "params":[],
        "description":"(end_list)\n结束对当前激活的对话框列表的操作"},
    "entget":{"prefix":["entget"],"body":"(entget${0})",
        "params":[
            {"label":"ename","doc":"要查询的图元的名称。ename 可以为图形或非图形图元"},
            {"label":"[applist]","doc":"注册应用名的列表"}
        ],
        "description":"(entget ename [applist])\n获得对象（图元）的定义数据"},
    "entmake":{"prefix":["entmake"],"body":"(entmake${0})",
        "params":[
            {"label":"[elist]","doc":"图元定义数据表，其格式与 entget 函数所返回表的格式相似。elist 参数必须包含创建图元的全部必要数据。如果省略了任何一个必须的定义数据，该函数就会返回 nil 并拒绝创建该图元。如果省略了可选的定义数据（如图层），entmake 使用缺省值。图元类型（如 CIRCLE 或 LINE）必须是 elist 参数所指的表中的第一项或第二项。如果是第二项，那么第一项必须是图元名。在这种情况下，entmake 函数创建新图元时会忽略图元名。如果 elist 参数中包含了图元句柄，该句柄也会被忽略"}
        ],
        "description":"(entmake [elist])\n在图形中创建一个新图元"},
    "entlast":{"prefix":["entlast"],"body":"(entlast)${0}",
        "params":[],
        "description":"(entlast)\n返回图形中最后那个未删除的主对象（图元）名称"},
    "entmakex ":{"prefix":["entmakex"],"body":"(entmakex${0})",
        "params":[
            {"label":"[elist]","doc":"图元定义数据表，其格式与 entget 函数所返回表的格式相似。elist 参数必须包含创建图元的全部必要数据。如果省略了任何一个必须的定义数据，该函数就会返回 nil 并拒绝创建该图元。如果省略了可选的定义数据（如图层），entmakex 使用缺省值"}
        ],
        "description":"(entmakex [elist])\n创建一个新对象或图元，赋给它一个句柄和图元名（但不指定所有者），并返回新图元的名称"},
    "entmod":{"prefix":["entmod"],"body":"(entmod${0})",
        "params":[
            {"label":"elist","doc":"与 entget 函数返回表相同格式的表.对于那些使用浮点值的图元域（如厚度），entmod 函数可以接受整数，并将其转换成浮点数。与此类似，对于使用整数的图元域（如颜色代码），如果提供的是浮点数，entmod 函数会切除其小数部分，将其转换成整数"}
        ],
        "description":"(entmod elist)\n修改对象（图元）的定义数据"},
    "entnext":{"prefix":["entnext"],"body":"(entnext${0})",
        "params":[],
        "description":"(entnext [ename])\n返回图形中的下一个对象（图元）名"},
    "entupd":{"prefix":["entupd"],"body":"(entupd${0})",
        "params":[
            {"label":"ename","doc":"需要更新的图元的名称"}
        ],
        "description":"(entupd ename)\n更新对象（图元）的屏幕显示"},
    "entsel":{"prefix":["entsel"],"body":"(entsel${0})",
        "params":[
            {"label":"[msg]","doc":"用于提示用户的字符串。如果省略该参数，则提示信息为“选择对象”。"}
        ],
        "description":"(entsel [msg])\n提示用户通过指定一个点来选择单个对象（图元）"},
    "eq":{"prefix":["eq"],"body":"(eq${0}) ",
        "params":[
            {"label":"expr1","doc":"用于比较的表达式"},
            {"label":"expr2","doc":"与 expr1 进行比较的表达式"}
        ],
        "description":"(eq expr1 expr2)  \n确定两个表达式是否具有相同的约束条件"},
    "equal":{"prefix":["equal"],"body":"(equal${0}) ",
        "params":[
            {"label":"expr1","doc":"用于比较的表达式"},
            {"label":"expr1","doc":"与 expr1 进行比较的表达式"},
            {"label":"[fuzz]","doc":"实数，定义 expr1 和 expr2 之间的最大允许误差。误差在此范围内时，仍然认为二者相等"}
        ],
        "description":"(equal expr1 expr2 [fuzz]) \n确定两个表达式的值是否相等"},
    "exit":{"prefix":["exit"],"body":"(exit)${0}",
        "params":[],
        "description":"(exit)\n强行使当前应用程序退出"},
    "exp":{"prefix":["exp"],"body":"(exp${0})",
        "params":[
            {"label":"num","doc":"实数"}
        ],
        "description":"(exp num)\n返回常数 e (2.718282...) 的指定次幂（自然反对数）,也就是实数 (num) 的自然反对数"},
    "eval":{"prefix":["eval"],"body":"(eval${0}) ",
        "params":[
            {"label":"expr","doc":"要计算的表达式"}
        ],
        "description":"(eval expr) \n返回 AutoLISP 表达式的求值结果"},
    "fill_image":{"prefix":["fill_image"],"body":"(fill_image${0})",
        "params":[
            {"label":"x1","doc":"矩形左上角的 X 坐标。必须为正数"},
            {"label":"y1","doc":"矩形左上角的 Y 坐标。必须为正数"},
            {"label":"width","doc":"矩形填充区域相对于 x1 的宽度（以像素为单位）。"},
            {"label":"height","doc":"矩形填充区域相对于 y1 的宽度（以像素为单位）。"},
            {"label":"color","doc":"AutoCAD 颜色代码或下表中的逻辑颜色数值之一：  \n颜色属性所用的符号名称 颜色代码 ADI 助记符 说明  \n–2 BGLCOLOR AutoCAD 图形屏幕的当前颜色  \n–15 DBGLCOLOR 当前对话框背景色  \n–16 DFGLCOLOR 当前对话框（文本）的前景色  \n–18 LINELCOLOR 当前对话框线的颜色"}
        ],
        "description":"(fill_image x1 y1 width height color)\n在当前激活的对话框图像控件中画一个填充矩形"},
    "expt":{"prefix":["expt"],"body":"(expt${0})",
        "params":[
            {"label":"number","doc":"任意数值"},
            {"label":"power","doc":"number 的幂数"}
        ],
        "description":"(expt number power)  \n返回以某指定数为底数的若干次幂的值"},
    "fix":{"prefix":["fix"],"body":"(fix${0})",
        "params":[
            {"label":"number","doc":"实数"}
        ],
        "description":"(fix number)  \n截去实数的小数部分，将它转换成整数后返回该整数"},
    "findfile":{"prefix":["findfile"],"body":"(findfile${0}) ",
        "params":[
            {"label":"filename","doc":"要搜索的文件或目录的名称"}
        ],
        "description":"(findfile filename) \n在 AutoCAD 库路径中搜索指定文件或目录"},
    "expand":{"prefix":["expand"],"body":"(expand${0})",
        "params":[
            {"label":"n-expand","doc":"整数，它指定要分配的附加内存数量。内存的分配如下：  \nn-alloc 自由符号  \nn-alloc 自由字符串  \nn-alloc 自由 usubr  \nn-alloc 自由实数  \nn-alloc * n-expand cons 单位  \n这里 n-alloc 为当前段大小"}
        ],
        "description":"(expand n-expand)\n为 AutoLISP 分配附加空间"},
    "float":{"prefix":["float"],"body":"(float${0}) ",
        "params":[{"label":"number","doc":"任意数值"}],
        "description":"(float number) \n将一个数转换为实数后返回"},
    "foreach":{"prefix":["foreach"],"body":"(foreach${0})",
        "params":[
            {"label":"name","doc":"表中元素将被赋给该名称指定的变量"},
            {"label":"list","doc":"由要求值的元素组成的表"},
            {"label":"[expr...]","doc":"要对 list 中元素求值的表达式"}
        ],
        "description":"(foreach name list [expr...])\n将表中的所有成员以指定变量的身份带入表达式求值"},
    "function":{"prefix":["function"],"body":"(function${0})",
        "params":[
            {"label":"函数名或lambda表达式","doc":"symbol 命名函数的符号。  \nlambda-expr 如下格式的表达式：  \n(LAMBDA arguments {S-expression}* ) "}
        ],
        "description":"(function symbol | lambda-expr) \n通知 Visual LISP 编译器将参数作为内置函数进行链接和优化"},
    "getangle":{"prefix":["getangle"],"body":"(getangle${0}) ",
        "params":[],
        "description":"(getangle [pt] [msg]) \n暂停以等待用户输入角度，然后以弧度形式返回该角度"},
    "gcd":{"prefix":["gcd"],"body":"(gcd${0}) ",
        "params":[
            {"label":"int1","doc":"大于 0 的整数"},
            {"label":"int2","doc":"大于 0 的整数"}
        ],
        "description":"(gcd int1 int2)  \n返回两个整数的最大公约数"},
    "getcfg":{"prefix":["getcfg"],"body":"(getcfg${0}) ",
        "params":[
            {"label":"cfgname","doc":"字符串，指定要检索的段和参数值（长度不能超过 496 个字符）。"}
        ],
        "description":"(getcfg cfgname)  \n从 acad.cfg 文件的 AppData 段中检索应用数据"},
    "getcname ":{"prefix":["getcname "],"body":"(getcname${0}) ",
        "params":[
            {"label":"cname","doc":"本地化命令名或带下划线的英文命令名，其长度不能超过 64 个字符"}
        ],
        "description":"(getcname cname)  \n获取 AutoCAD 命令的本地化名或英文名"},
    "getcorner":{"prefix":["getcorner"],"body":"(getcorner${0}) ",
        "params":[
            {"label":"pt","doc":"用作基点的点"},
            {"label":"[msg]","doc":"用于提示用户的字符串"}
        ],
        "description":"(getcorner pt [msg])  \n暂停等待用户输入矩形第二个角点的坐标"},
    "getenv":{"prefix":["getenv"],"body":"(getenv${0}) ",
        "params":[
            {"label":"variable-name","doc":"字符串，指定要读取的变量名。环境变量的拼写必须与系统注册表中的拼写完全一致（包括大小写）。"}
        ],
        "description":"(getenv variable-name)  \n以字符串方式返回指定的环境变量的值"},
    "getfiled":{"prefix":["getfiled"],"body":"(getfiled${0}) ",
        "params":[
            {"label":"title","doc":"字符串，指定对话框的标签"},
            {"label":"default","doc":"要使用的缺省文件名；可为空字符串 (\"\")。"},
            {"label":"ext","doc":"缺省的文件扩展名。如果 ext 为空字符串 (\"\")，则缺省值为 *（所有文件类型）。如果该参数中包含 dwg 文件类型，则 getfiled 函数在对话框中显示预览图像框"},
            {"label":"flags","doc":"整数（按位编码），控制对话框的行为。要一次设置多个条件，可以将几个位值加在一起生成一个 0 和 15 之间的标志值（包括 0 和 15）。"}
        ],
        "description":"(getfiled title default ext flags) \n用标准的 AutoCAD 文件对话框提示用户输入一个文件名，并返回该文件名"},
    "getdist":{"prefix":["getdist"],"body":"(getdist${0}) ",
        "params":[
            {"label":"[pt]","doc":"二维或三维点。用作当前 UCS 中的基点。如果已经提供了 pt，则仅提示用户输入第二点"},
            {"label":"[msg]","doc":"用于提示用户的字符串。如果未指定该参数，则 AutoCAD 不显示提示信息"}
        ],
        "description":"(getdist [pt] [msg]) \n暂停以等待用户输入距离"},
    "getint":{"prefix":["getint"],"body":"(getint${0}) ",
        "params":[
            {"label":"[msg]","doc":"用于提示用户的字符串。如果忽略该参数，则不显示提示信息"}
        ],
        "description":"(getint [msg]) \n暂停以等待用户输入一个整数并返回该整数"},
    "getkword":{"prefix":["getkword"],"body":"(getkword${0}) ",
        "params":[
            {"label":"[msg]","doc":"用于提示用户的字符串。如果忽略该参数，则不显示提示信息"}
        ],
        "description":"(getkword [msg]) \n暂停以等待用户输入一个关键字并返回该关键字"},
    "gc":{"prefix":["gc"],"body":"(gc)${0}",
        "params":[],
        "description":"(gc)\n强制收集无用数据，释放不再使用的节点"},
    "getpoint":{"prefix":["getpoint"],"body":"(getpoint${0}) ",
        "params":[
            {"label":"[pt]","doc":"当前 UCS 中的二维或三维基点。  \n请注意 getpoint 函数还可以接受一个整数或实数作为 pt 参数，并使用直接距离输入法来指定点。这种方法以 LASTPOINT 系统变量的值作为起点，将 pt 作为距离，根据当前光标相对于 lastpoint 的位置确定方向。其结果是在当前光标位置的方向上和上一点之间的距离为指定值的点"},
            {"label":"[msg]","doc":"用于提示用户的字符串"}
        ],
        "description":"(getpoint [pt] [msg]) \n暂停以等待用户输入点，并返回该点"},
    "getorient":{"prefix":["getorient"],"body":"(getorient${0}) ",
        "params":[
            {"label":"[pt]","doc":"当前 UCS 中的二维基点。  \n如果指定 pt 参数，则假设其为两点中的第一点。允许用户指定另一个点来给 AutoLISP 指定角度。也可以提供三维基点，但测量角度总是在当前构造平面上进行"},
            {"label":"[msg]","doc":"用于提示用户的字符串"}
        ],
        "description":"(getorient [pt] [msg]) \n暂停以等待用户输入角度，并返回该角度"},
    "getreal":{"prefix":["getreal"],"body":"(getreal${0}) ",
        "params":[
            {"label":"[msg]","doc":"用于提示用户的字符串"}
        ],
        "description":"(getreal [msg]) \n暂停以让用户输入一个实数并返回该实数"},
    "getvar":{"prefix":["getvar"],"body":"(getvar${0}) ",
        "params":[
            {"label":"varname","doc":"指定系统变量名的字符串或符号"}
        ],
        "description":"(getvar varname)  \n获取一个 AutoCAD 系统变量的值"},
    "get_attr":{"prefix":["get_attr"],"body":"(get_attr${0})",
        "params":[
            {"label":"key","doc":"指定控件操作名的字符串，区分大小写"},
            {"label":"attribute","doc":"指定出现在该控件的 DCL 描述中的属性"}
        ],
        "description":"(get_attr key attribute)\n获取对话框指定控件的某个属性值"},
    "get_tile":{"prefix":["get_tile"],"body":"(get_tile${0})",
        "params":[
            {"label":"key","doc":"指定控件操作名的字符串，区分大小写"}
        ],
        "description":"(get_tile key)  \n获取对话框指定控件的当前运行时的值"},
    "graphscr":{"prefix":["graphscr"],"body":"(graphscr)${0}",
        "params":[],
        "description":"(graphscr)  \n显示 AutoCAD 图形屏幕"},
    "grdraw":{"prefix":["grdraw"],"body":"(grdraw${0}) ",
        "params":[
            {"label":"from","doc":"二维或三维点（两个或三个实数的列表），指定当前 UCS 中矢量的端点。AutoCAD 剪裁该矢量以适合屏幕显示"},
            {"label":"to","doc":"二维或三维点（两个或三个实数的列表），指定当前 UCS 中矢量的另一个端点。AutoCAD 剪裁该矢量以适合屏幕显示"},
            {"label":"color","doc":"整数，指定绘制矢量的颜色。如果该参数为 -1，则指定为 XOR（异或）操作方式，即用当前绘图颜色与所经过位置处的当前颜色做异或操作，而不是简单地覆盖原有颜色"},
            {"label":"[highlight]","doc":"非 0 整数，指定以显示设备的缺省亮显方式来绘制矢量（通常为虚线）。如忽略 highlight 或该参数为 0，则 grdraw 使用正常显示模式"}
        ],
        "description":"(grdraw from to color [highlight]) \n在当前视口中的两个点之间显示一条矢量线"},
    "grclear":{"prefix":["grclear"],"body":"(grclear)${0}",
        "params":[],
        "description":"(grclear)  \n清除当前视口（已废弃）"},
    "getstring":{"prefix":["getstring"],"body":"(getstring${0}) ",
        "params":[
            {"label":"[cr]","doc":"如果提供了该参数且其值不为 nil，那么输入的字符串可以包括空格且必须按 ENTER 键结束。否则，输入的字符串以空格键或 ENTER 键结束"},
            {"label":"[msg]","doc":"用于提示用户的字符串"}
        ],
        "description":"(getstring [cr][msg]) \n暂停以等待用户输入字符串，并返回该字符串"},
    "grread":{"prefix":["grread"],"body":"(grread${0}) ",
        "params":[
            {"label":"[track]","doc":"如果提供该参数且其值不为 nil，则输入设备移动时，本函数能从定点设备中返回坐标"},
            {"label":"[allkeys]","doc":"整数型，决定 grread 要执行的功能。allkeys 的几个位值相加可以获得组合功能。可以指定如下值：  \n1 （位0） 返回“拖动模式”坐标。如果设置了该位，而且用户只是移动定点设备而没有按下按钮或键盘，grread 函数就返回一个表，其第一个成员是类型代码 5，第二个成员是当前定点设备（鼠标或数字化仪）的位置坐标 (X,Y)，这就是 AutoCAD 实现拖动的方法。  \n2 （位1） 返回所有的键值，包括功能键和光标键代码，用户按下光标键时并不移动光标。  \n4 （位2） 使用 curtype 参数传来的值控制光标的显示。  \n8 （位3） 在用户按下 ESC 键时不显示相应错误信息"},
            {"label":"[curtype]","doc":"整数型，表明显示光标的类型。只有当 allkeys 参数的第二位为 1 时 curtype 参数才有效。该参数只控制当前 grread 函数调用时显示的光标类型。可以指定下列 curtype 值：  \n0 显示普通十字光标。  \n1 不显示光标（无十字光标）。  \n2 显示对象选择光标"}
        ],
        "description":"(grread [track] [allkeys [curtype]]) \n从 AutoCAD 的任何一种输入设备中读取数值"},
    "grtext":{"prefix":["grtext"],"body":"(grtext${0})",
        "params":[
            {"label":"[box]","doc":"整数型，指定待写文本的位置"},
            {"label":"[text]","doc":"要写到状态行或屏幕菜单区的字符串。如果 text 参数太长，则它将被截断"},
            {"label":"[highlight]","doc":"整数，用于标识是否亮显屏幕菜单项"}
        ],
        "description":"(grtext [box text [highlight]])\n将文本写到状态行或屏幕菜单区"},
    "grvecs":{"prefix":["grvecs"],"body":"(grvecs${0}) ",
        "params":[
            {"label":"vlist","doc":"由一系列的可选颜色代码（整数）和两个点表组成的矢量表。关于设置 vlist 格式的详细信息，请参见矢量表格式"},
            {"label":"[trans]","doc":"转换矩阵，用来改变定义在矢量表中的矢量位置或比例。它是由四个子表组成的，每个子表又由四个实数组成"}
        ],
        "description":"(grvecs vlist [trans]) \n在图形屏幕上绘制多个矢量"},
    "handent":{"prefix":["handent"],"body":"(handent${0}) ",
        "params":[
            {"label":"handle","doc":"表示图元句柄的字符串"}
        ],
        "description":"(handent handle) \n根据对象（图元）的句柄返回它的对象（图元）名"},
    "initdia":{"prefix":["initdia"],"body":"(initdia${0})",
        "params":[
            {"label":"[dialogflag]","doc":"整数型。如果没有提供该参数或提供的该参数不为 0，下一个（也仅有下一个）命令将使用该命令的对话框而不是命令行提示。如果 dialogflag 参数为 0，那么该调用将清除以前对该函数的调用，恢复显示命令行界面的缺省状态"}
        ],
        "description":"(initdia [dialogflag])\n强制显示下一个命令的对话框"},
    "help ":{"prefix":["help "],"body":"(help${0})",
        "params":[
            {"label":"[helpfile]","doc":"指定帮助文件的字符串。helpfile 参数不需要指定文件扩展名。如果指定文件扩展名，则 AutoCAD 仅查找该文件。如果 helpfile 参数为空字符串 (\"\") 或被省略，则 AutoCAD 使用缺省 AutoCAD 帮助文件如果不指定扩展名，则 AutoCAD 查找带 .chm 扩展名的 helpfile，如果找不到该名称的文件，AutoCAD 查找带 .hlp 扩展名的文件"},
            {"label":"[topic]","doc":"关键字，指定帮助显示的主题 ID。如果 topic 参数是空字符串 (\"\")，则会显示帮助文件的默认页面。如果在调用 CHM 文件中的主题，提供的文件名不需要扩展名， AutoCAD 会自动添加 .htm扩展名。"},
            {"label":"[command]","doc":"字符串，指定帮助窗口的初始状态，command 参数是 HtmlHelp() 和 WinHelp() 函数的 uCommand(在 HTML 帮助中)或 fucommand(在 WinHelp 中)参数所使用的一个字符串，HtmlHelp() 和 WinHelp() 函数的定义可参见 Microsoft Windows SDK 中的 WinHelp API。"}
        ],
        "description":"(help [helpfile [topic [command]]]) \n调用帮助工具"},
    "if":{"prefix":["if"],"body":"(if${0}) ",
        "params":[
            {"label":"testexpr","doc":"判断表达式"},
            {"label":"thenexpr","doc":"如果 testexpr 不等于 nil 则执行该表达式"},
            {"label":"[thenexpr]","doc":"如果 testexpr 等于 nil 则执行该表达式"}
        ],
        "description":"(if testexpr thenexpr [elseexpr]) \n根据对条件的判断结果，对两个表达式求值"},
    "inters":{"prefix":["inters"],"body":"(inters${0}) ",
        "params":[
            {"label":"pt1","doc":"第一条直线的端点"},
            {"label":"pt2","doc":"第一条直线的另一端点"},
            {"label":"pt3","doc":"第二条直线的端点"},
            {"label":"pt4","doc":"第二条直线的另一端点"},
            {"label":"[onseg]","doc":"如果指定为 nil，则由四个 pt 参数定义的两条线被认为是无限长的。如果省略 onseg 参数或其值不为 nil，则交点必须同时位于两条线上，否则 inters 返回 nil"}
        ],
        "description":"(inters pt1 pt2 pt3 pt4 [onseg]) \n求两条直线的交点"},
    "initget":{"prefix":["initget"],"body":"(initget${0})",
        "params":[
            {"label":"[bits]","doc":"按位编码的整数，用于控制是否允许某些类型的用户输入"},
            {"label":"[string]","doc":"代表关键字表的字符串"}
        ],
        "description":"(initget [bits] [string])\n为随后的用户输入函数调用创建关键字"},
        "doc":"https://help.autodesk.com/view/OARX/2019/ENU/?guid=GUID-A181D474-F817-4550-86E9-87649262FA8A",
    "itoa":{"prefix":["itoa"],"body":"(itoa${0}) ",
        "params":[
            {"label":"int","doc":"需要转换的整数"}
        ],
        "description":"(itoa int) \n将整数转换成字符串，并返回转换结果"},
    "lambda":{"prefix":["lambda"],"body":"(lambda${0}) ",
        "params":[
            {"label":"arguments","doc":"传给表达式的参数"},
            {"label":"expr","doc":"AutoLISP 表达式"},
            {"label":"....","doc":"更多AutoLISP 表达式"}
        ],
        "description":"(lambda arguments expr...) \n定义无名函数"},
    
    "list":{"prefix":["list"],"body":"(list${0})",
        "params":[
            {"label":"[expr]","doc":"AutoLISP 表达式"},
            {"label":"...","doc":"更多AutoLISP 表达式"}
        ],
        "description":"(list [expr...])  \n将任意数目的表达式组合成一个表"},
    "layoutlist":{"prefix":["layoutlist"],"body":"(layoutlist)${0}",
        "params":[],
        "description":"(layoutlist)  \n返回当前图形中所有图纸空间布局组成的表"},
    "length":{"prefix":["length"],"body":"(length${0})",
        "params":[
            {"label":"lst","doc":"列表"}
        ],
        "description":"(length lst)\n以整数形式返回表中元素的数目"},
    "listp":{"prefix":["listp"],"body":"(listp${0})",
        "params":[
            {"label":"item","doc":"任何原子、表或表达式"}
        ],
        "description":"(listp item)  \n检查某个项是否是表"},
    "load":{"prefix":["load"],"body":"(load${0}) ",
        "params":[
            {"label":"filename","doc":"表示文件名的字符串"},
            {"label":"[onfailure]","doc":"load 失败时返回的值"}
        ],
        "description":"(load filename [onfailure]) \n对一个文件中的 AutoLISP 表达式求值"},
    "load_dialog":{"prefix":["load_dialog"],"body":"(load_dialog${0})",
        "params":[
            {"label":"dclfile","doc":"指定要加载 DCL 文件的字符串。如果 dclfile 参数没有指定文件扩展名，则扩展名为 .dcl"}
        ],
        "description":"(load_dialog dclfile)  \n加载 DCL 文件"},
    "log":{"prefix":["log"],"body":"(log${0}) ",
        "params":[
            {"label":"num","doc":"正数"}
        ],
        "description":"(log num) \n返回一个实数的自然对数"},
    "logand":{"prefix":["logand"],"body":"(logand${0}) ",
        "params":[
            {"label":"int","doc":"正数"},
            {"label":"int","doc":"正数"},
            {"label":"...","doc":"更多正数"}
        ],
        "description":"(logand [int int...])  \n返回一个整数表中的各数按位逻辑与 (AND) 的结果"},
    "mapcar":{"prefix":["mapcar"],"body":"(mapcar${0})",
        "params":[
            {"label":"function","doc":"正数"},
            {"label":"list1...listn","doc":"一个或多个表。表的数目必须与 function 参数中要求的参数个数相等"}
        ],
        "description":"(mapcar function list1...listn)\n将作为本函数参数的一个或多个表的各个元素提供给指定函数进行求值，并将由求值结果构成的表返回"},
    "logior":{"prefix":["logior"],"body":"(logior${0}) ",
        "params":[
            {"label":"[int]","doc":"整数"},
            {"label":"[int]","doc":"整数"},
            {"label":"[...]","doc":"更多整数"}
        ],
        "description":"(logior [int int...]) \n返回一个整数表中的各数按位逻辑或 (OR) 的结果"},
    "lsh":{"prefix":["lsh"],"body":"(lsh${0}) ",
        "params":[
            {"label":"int","doc":"整数"},
            {"label":"numbits","doc":"int 移位的次数。如果 numbits 为正，int 向左移；如果 numbits 为负，int 向右移。在这两种情况下，移入位为 0，移出位丢弃如果未指定 numbits，则不发生位移"}
        ],
        "description":"(lsh int numbits)  \n返回某整数作指定次逻辑移位后的结果"},
    "last":{"prefix":["last"],"body":"(last${0})",
        "params":[
            {"label":"lst","doc":"列表"}
        ],
        "description":"(last lst)  \n返回表的最后一个元素"},
    "max":{"prefix":["max"],"body":"(max${0}) ",
        "params":[
            {"label":"[number]","doc":"整数或实数"},
            {"label":"[number]","doc":"整数或实数"},
            {"label":"[...]","doc":"任意多个整数或实数"}
        ],
        "description":"(max [number number...])  \n返回给定各数中的最大者"},
    "menucmd":{"prefix":["menucmd"],"body":"(menucmd${0}) ",
        "params":[
            {"label":"string","doc":"字符串，指定菜单区和要赋给这个菜单区的值。string 参数有下列参量：  \n\"menu_area=value\""}
        ],
        "description":"(menucmd string)  \n发出菜单命令，或设置并检索菜单项状态"},
    "member":{"prefix":["member"],"body":"(member${0})",
        "params":[
            {"label":"expr","doc":"要搜索的表达式"},
            {"label":"lst","doc":"要在其中搜索expr的列表"}
        ],
        "description":"(member expr lst)  \n搜索表中是否包含某表达式，并从该表达式的第一次出现处返回表的其余部分"},
    "mem":{"prefix":["mem"],"body":"(mem)${0}",
        "params":[],
        "description":"(mem)  \n显示 AutoLISP 内存的当前状态"},
    "menugroup":{"prefix":["menugroup"],"body":"(menugroup${0}) ",
        "params":[
            {"label":"groupname","doc":"字符串，菜单组的名称"}
        ],
        "description":"(menugroup groupname)  \n检查是否加载了指定的菜单组"},
    
    "minusp":{"prefix":["minusp"],"body":"(minusp${0}) ",
        "params":[
            {"label":"num","doc":"整数或实数"}
        ],
        "description":"(minusp num)  \n检查某个数是否是负数"},
    "min":{"prefix":["min"],"body":"(min${0}) ",
        "params":[
            {"label":"[number]","doc":"整数或实数"},
            {"label":"[number]","doc":"整数或实数"},
            {"label":"[...]","doc":"任意多个整数或实数"}
        ],
        "description":"(min [number number...])  \n返回给定各数中的最小者"},
    "mode_tile":{"prefix":["mode_tile"],"body":"(mode_tile${0})",
        "params":[
            {"label":"key","doc":"指定控件操作名的字符串。区分大小写"},
            {"label":"mode","doc":"下列整数之一：0 启用控件。1 禁用控件。2 将控件设为焦点3 选择编辑框内容4 切换图像亮显。"}
        ],
        "description":"(mode_tile key mode)  \n设置对话框控件的状态"},
    "nentselp":{"prefix":["nentselp"],"body":"(nentselp${0}) ",
        "params":[
            {"label":"[msg]","doc":"用作提示的字符串。如果省略该参数，则显示“选择对象”提示"},
            {"label":"[pt]","doc":"选择点。该参数允许在没有用户输入的情况下实现对象选择"}
        ],
        "description":"(nentselp [msg] [pt])  \n在没有用户输入的情况下，本函数的功能与 nentsel 函数类似"},
    "new_dialog":{"prefix":["new_dialog"],"body":"(new_dialog${0})",
        "params":[
            {"label":"dlgname","doc":"用于标识对话框的字符串"},
            {"label":"dcl_id","doc":"由 load_dialog 获得的 DCL 文件标识符"},
            {"label":"[action]","doc":"字符串，包含用作缺省操作的 AutoLISP 表达式。如果不想指定缺省操作，可以将该参数指定为空字符串 (\"\")。如果指定了 screen-pt 就必须指定 action 参数。当用户拾取了某个激活的控件，而该控件没有通过 action_tile 函数或 DCL 显式指定操作或回调函数，则计算指定的缺省操作"},
            {"label":"[screen-pt]","doc":"二维点表，用于指定屏幕上对话框位置的 X、Y 坐标。该点通常指定的是对话框的左上角，但它还与平台有关，其值通常用系统单位来表示。如果将该点指定为 '(-1 -1)，那么打开对话框时它显示在缺省位置上（AutoCAD 的图形屏幕的中心位置）。"}
        ],
        "description":"(new_dialog dlgname dcl_id [action [screen-pt]])\n开始一个新的对话框并显示该对话框，而且能指定一个缺省操作"},
    "nentsel":{"prefix":["nentsel"],"body":"(nentsel${0}) ",
        "params":[
            {"label":"[msg]","doc":"用作提示的字符串。如果省略该参数，则显示“选择对象”提示"}
        ],
        "description":"(nentsel [msg]) \n提示用户指定点来选择对象（图元），得到这个对象所指片段的对象名"},
    "nth":{"prefix":["nth"],"body":"(nth${0})",
        "params":[
            {"label":"n","doc":"整数，第几个元素(从0开始计数)"},
            {"label":"lst","doc":"列表"}
        ],
        "description":"(nth n lst)  \n返回表中的第 n 个元素"},
    "null":{"prefix":["null"],"body":"(null${0})",
        "params":[
            {"label":"item","doc":"AutoLISP 表达式"}
        ],
        "description":"(null item)  \n检查某项的值是否设置为 nil "},
    "not":{"prefix":["not"],"body":"(not${0}) ",
        "params":[
            {"label":"item","doc":"AutoLISP 表达式"}
        ],
        "description":"(not item)  \n检查一个项的求值结果是否为 nil"},
    
    "numberp":{"prefix":["numberp"],"body":"(numberp${0})",
        "params":[
            {"label":"item","doc":"AutoLISP 表达式"}
        ],
        "description":"(numberp item)  \n检查某个项是否是实数或整数"},
    "open":{"prefix":["open"],"body":"(open${0}) ",
        "params":[
            {"label":"filename","doc":"字符串，指定要打开文件的名称和扩展名。如果没有指定文件的全部路径，则 open 假定其路径为 AutoCAD 启动目录"},
            {"label":"mode","doc":"指明文件的状态为打开文件用于读、写或追加"}
        ],
        "description":"(open filename mode)  \n打开一个文件，供其他 AutoLISP I/O 函数访问"},
    "or":{"prefix":["or"],"body":"(or${0}) ",
        "params":[
            {"label":"[expr]","doc":"AutoLISP 表达式"},
            {"label":"[...]","doc":"任意多个AutoLISP 表达式"}
        ],
        "description":"(or [expr...])  \n返回对表达式进行逻辑或 (OR) 运算的结果"},
    
    "osnap":{"prefix":["osnap"],"body":"(osnap${0}) ",
        "params":[
            {"label":"pt","doc":"点"},
            {"label":"mode","doc":"字符串，其中包含了一个或多个有效的对象捕捉模式标志符（如 mid、cen 等），各标志符之间用逗号隔开"}
        ],
        "description":"(osnap pt mode)  \n将某种对象捕捉模式作用于指定点而获得一个点，并返回该点"},
    "polar":{"prefix":["polar"],"body":"(polar${0})",
        "params":[
            {"label":"pt","doc":"二维或三维点"},
            {"label":"ang","doc":"以弧度为单位的角度值，它是相对于当前构造平面 X 轴按逆时针方向计算的"},
            {"label":"dist","doc":"与指定点 pt 的距离"}
        ],
        "description":"(polar pt ang dist)   \n在 UCS 坐标系下，求某点的指定角度和指定距离处的点，并返回该点"},
    "prin1":{"prefix":["prin1"],"body":"(prin1${0})",
        "params":[
            {"label":"[expr]","doc":"字符串或 AutoLISP 表达式。仅打印指定的 expr，而不包括换行或空格"},
            {"label":"[file-desc]","doc":"以写方式打开的文件的文件描述符"}
        ],
        "description":"(prin1 [expr [file-desc]])  \n在命令行打印一个表达式或将表达式写入已打开的文件中"},
    "princ":{"prefix":["princ"],"body":"(princ${0})",
        "params":[
            {"label":"[expr]","doc":"字符串或 AutoLISP 表达式。仅打印指定的 expr，而不包括换行或空格"},
            {"label":"[file-desc]","doc":"以写方式打开的文件的文件描述符"}
        ],
        "description":"(princ [expr [file-desc]])\n在命令行打印表达式，或将表达式写入已打开的文件中"},
    
    "print":{"prefix":["print"],"body":"(print${0})",
        "params":[
            {"label":"[expr]","doc":"字符串或 AutoLISP 表达式。仅打印指定的 expr，而不包括换行或空格"},
            {"label":"[file-desc]","doc":"以写方式打开的文件的文件描述符"}
        ],
        "description":"(print [expr [file-desc]])\n在命令行打印表达式，或将表达式写入已打开的文件中"},
    "prompt":{"prefix":["prompt"],"body":"(prompt${0})",
        "params":[
            {"label":"msg","doc":"字符串"}
        ],
        "description":"(prompt msg)\n在屏幕提示区显示一个字符串"},
    "progn":{"prefix":["progn"],"body":"(progn \n${0}\n)",
        "params":[
            {"label":"[expr]","doc":"AutoLISP 表达式"},
            {"label":"[...]","doc":"任意多个AutoLISP 表达式"}
        ],
        "description":"(progn [expr]...)   \n顺序地对每一个表达式进行求值，并返回最后那个表达式的值"},
    "quit":{"prefix":["quit"],"body":"(quit)${0}",
        "params":[],
        "description":"(quit)  \n强制退出当前应用程序"},
    "quote":{"prefix":["quote"],"body":"(quote${0})",
        "params":[
            {"label":"expr","doc":"AutoLISP 表达式"}
        ],
        "description":"(quote expr)  \n返回表达式而不对其求值"},
    "read-line":{"prefix":["read-line"],"body":"(read-line${0}) ",
        "params":[
            {"label":"[fie-desc]","doc":"文件描述符（来自 open），代表打开的文件。如果未指定 file-desc，则 read-line 从键盘输入缓冲区中获取输入"}
        ],
        "description":"(read-line [file-desc])  \n从键盘或已打开文件中读取行结束符前的字符串"},
    "read-char":{"prefix":["read-char"],"body":"(read-char${0}) ",
        "params":[
            {"label":"[fie-desc]","doc":"文件描述符（来自 open），代表打开的文件。如果未指定 file-desc，则 read-char 从键盘输入缓冲区中获取输入字符"}
        ],
        "description":"(read-char [file-desc]) \n从键盘输入缓冲区或打开文件中读入一个字符，并将该字符转换成十进制的 ASCII 码值后返回"},
    "read":{"prefix":["read"],"body":"(read${0}) ",
        "params":[
            {"label":"[string]","doc":"字符串。string 参数不能在表或字符串外包含空格"}
        ],
        "description":"(read [string])  \n返回字符串中的第一个表或第一个原子"},
    "redraw":{"prefix":["redraw"],"body":"(redraw${0}) ",
        "params":[
            {"label":"[ename]","doc":"要重画图元的名称"},
            {"label":"[mode]","doc":"整数值，用于控制图元的可见性和亮显。mode 可为下列值之一：1 显示图元 2 隐藏图元（使其不可见） 3 亮显图元 4 不亮显图元  \n亮显图元模式 (mode=3) 必须与不亮显图元模式 (mode=4)协调使用"}
        ],
        "description":"(redraw [ename [mode]])  \n重画当前视口或当前视口中的一个指定对象（图元）"},
    "namedobjdict":{"prefix":["namedobjdict"],"body":"(namedobjdict)${0}",
        "params":[],
        "description":"(namedobjdict) \n返回当前图形的命名对象词典的图元名，它是所有非图形对象的根"},
    "rem":{"prefix":["rem"],"body":"(rem${0}) ",
        "params":[
            {"label":"[number]","doc":"任意数值"},
            {"label":"[number]","doc":"任意数值"},
            {"label":"[...]","doc":"更多数值"}
        ],
        "description":"(rem [number number...])  \n将第一个数除以第二个数，并返回余数  \n如果调用本函数时提供的参数多于两个，则 rem 函数返回 (rem ... (rem (rem num1 num2) num3)... ) 的结果。如果提供的参数多于两个，rem 按从左到右的顺序计算参数。例如，如果提供了三个数值，则 rem 用第一个数除以第二个数，再用结果除以第三个数，返回最后的余数。"},
    "regapp":{"prefix":["regapp"],"body":"(regapp${0}) ",
        "params":[
            {"label":"application","doc":"命名应用程序的字符串。名称必须为有效的符号表名称。关于 AutoLISP 确定符号名有效性的规则，请参见 snvalid 的说明"}
        ],
        "description":"(regapp application)  \n为当前 AutoCAD 图形注册一个应用名，为使用扩展对象数据作准备"},
    "repeat":{"prefix":["repeat"],"body":"(repeat${0})",
        "params":[
            {"label":"int","doc":"正整数"},
            {"label":"[expr]","doc":"一个或多个原子或表达式"},
            {"label":"[...]","doc":"更多个原子或表达式"}
        ],
        "description":"(repeat int [expr...])  \n对循环体中的每一个表达式进行指定次数的求值计算，并返回最后一个表达式的值"},
    "rtos":{"prefix":["rtos"],"body":"(rtos${0}) ",
        "params":[
            {"label":"number","doc":"整数或实数"},
            {"label":"[mode]","doc":"整数，指定现行单位模式。mode 的取值对应于 AutoCAD 系统变量 lunits 的允许值，如下所示  \n1 科学  \n2 小数  \n3 工程（英尺和十进制英寸）  \n4 建筑（英尺和分数英寸）  \n5 分数"},
            {"label":"[precision]","doc":"整数，指定精度"}
        ],
        "description":"(rtos number [mode [precision]]) \n将数字转换成字符串"},
    "reverse":{"prefix":["reverse"],"body":"(reverse${0})",
        "params":[
            {"label":"lst","doc":"列表"}
        ],
        "description":"(reverse lst)  \n将表的元素顺序倒置后返回"},
    "setcfg":{"prefix":["setcfg"],"body":"(setcfg${0})",
        "params":[
            {"label":"cfgname","doc":"字符串，它指定段和要被设置为 cfgval 的值的参数。cfgname 参数必须是如下格式的字符串：  \nAppData/application_name/section_name/.../param_name"},
            {"label":"cfgval","doc":"字符串。最长可达 512 个字符。setcfg 接受较大的字符串，但不能被 getcfg 返回"}
        ],
        "description":"(setcfg cfgname cfgval) \n将应用数据写到 acad.cfg 文件的 AppData 段中"},
    "setenv":{"prefix":["setenv"],"body":"(setenv${0}) ",
        "params":[
            {"label":"varname","doc":"字符串，指定要设置的环境变量的名称。环境变量名的拼写和大小写必须与系统注册表中一致"},
            {"label":"value","doc":"字符串，指定要给 varname 设置的值"}
        ],
        "description":"(setenv varname value)  \n将系统环境变量设为指定值"},
    "set":{"prefix":["set"],"body":"(set${0}) ",
        "params":[
            {"label":"sym","doc":"符号"},
            {"label":"expr","doc":"AutoLISP 表达式"}
        ],
        "description":"(set sym expr) \n将引号中的符号名的值设置成一个表达式的值"},
    
    "setfunhelp":{"prefix":["setfunhelp"],"body":"(setfunhelp${0})",
        "params":[
            {"label":"c:fname","doc":"字符串，指定用户定义命令（C:XXX 函数）其中必须包含 c: 前缀"},
            {"label":"[helpfile]","doc":"字符串，命名帮助文件。在 helpfile 参数中不需要指定文件扩展名。如果指定了扩展名，则 AutoCAD 仅查找完全匹配的文件。如果不指定文件扩展名，AutoCAD 在查找 helpfile 时自动添加扩展名 .hlp。如果未找到同名文件，AutoCAD 继续查找扩展名为 .ahp 的文件。如果仍未找到，则 AutoCAD 搜索不含扩展名的 helpfile"},
            {"label":"[topic]","doc":"字符串，指定帮助文件的主题标识符"},
            {"label":"[command]","doc":"字符串，指定帮助窗口的初始状态，command 参数是 HtmlHelp() 和 WinHelp() 函数的 uCommand(在 HTML 帮助中)或 fucommand(在 WinHelp 中)参数所使用的一个字符串，HtmlHelp() 和 WinHelp() 函数的定义可参见 Microsoft Windows SDK 中的 WinHelp API"}
        ],
        "description":"(setfunhelp c:fname [helpfile [topic [command]]])\n给帮助工具注册一个用户定义函数，这样，用户在请求该命令的帮助时，就会调用正确的帮助文件和主题"},
    "setq":{"prefix":["setq"],"body":"(setq${0})",
        "params":[
            {"label":"sym","doc":"符号。不计算该参数"},
            {"label":"expr","doc":"表达式"},
            {"label":"[2sym]","doc":"符号。不计算该参数"},
            {"label":"[2expr]","doc":"表达式"},{"label":"[...]","doc":"更多任意 sym expr对"}
        ],
        "description":"(setq sym expr [2sym 2expr]...) \n将一个或多个符号的值设置为相应表达式的值"},

    "setview":{"prefix":["setview"],"body":"(setview${0}) ",
        "params":[
            {"label":"view_descriptor","doc":"图元定义表，与对 VIEW 符号表使用 tblsearch 函数返回的表类似"},
            {"label":"[vport_id]","doc":"整数，指定获得新视图的视口。如果 vport_id 为 0，则当前视口获得新视图。  \n可以从 CVPORT 系统变量中获取 vport_id 数"}
        ],
        "description":"(setview view_descriptor [vport_id]) \n为指定视口建立一个视图"},
    "sin":{"prefix":["sin"],"body":"(sin${0})",
        "params":[
            {"label":"ang","doc":"以弧度为单位的角度"}
        ],
        "description":"(sin ang)  \n以实数形式返回角度的正弦值（以弧度为单位）"},
    "set_tile":{"prefix":["set_tile"],"body":"(set_tile${0})",
        "params":[
            {"label":"key","doc":"指定控件操作名的字符串"},
            {"label":"value","doc":"字符串，指定控件的新值（初始值由 value 属性设定）。"}
        ],
        "description":"(set_tile key value)\n设置对话框控件的值"},
    "slide_image":{"prefix":["slide_image"],"body":"(slide_image${0})",
        "params":[
            {"label":"x1","doc":"距控件左上角的 X 偏移量（以像素为单位）。必须为正值"},
            {"label":"y1","doc":"距控件左上角的 Y偏移量（以像素为单位）。必须为正值"},
            {"label":"width","doc":"图像宽度（以像素为单位）。"},
            {"label":"height","doc":"图像高度（以像素为单位）。"},
            {"label":"sldname","doc":"幻灯片。该参数可以是幻灯文件 (.sld) 或幻灯库文件 (.slb) 中的一个幻灯片。指定 sldname 的方式和在 VSLIDE 命令或菜单文件中指定幻灯片的方法一样"}
        ],
        "description":"(slide_image x1 y1 width height sldname)\n在当前激活的对话框图像控件中显示 AutoCAD 幻灯片"},
    "sqrt":{"prefix":["sqrt"],"body":"(sqrt${0})",
        "params":[
            {"label":"num","doc":"整数或实数"}
        ],
        "description":"(sqrt num)  \n以实数形式返回一个数的平方根"},
    "snvalid":{"prefix":["snvalid"],"body":"(snvalid${0}) ",
        "params":[
            {"label":"sym_name","doc":"符号表名称"},
            {"label":"[flag]","doc":"整数，指定 sym_name.中是否可以包含竖线 (|)，它可以是:  \n0 在 sym_name 中不能包含竖线。（缺省值）  \n1 在 sym_name 中可以包含竖线（但不能是第一个或最后一个字符）"}
        ],
        "description":"(snvalid sym_name [flag])  \n检查组成符号表名称的各字符的有效性"},
    "ssdel":{"prefix":["ssdel"],"body":"(ssdel${0})",
        "params":[
            {"label":"ename","doc":"图元名称"},
            {"label":"ss","doc":"选择集"}
        ],
        "description":"(ssdel ename ss)  \n从选择集中删除对象（图元）"},
    "ssadd":{"prefix":["ssadd"],"body":"(ssadd${0})",
        "params":[
            {"label":"[ename]","doc":"对象名称"},
            {"label":"[ss]","doc":"选择集"}
        ],
        "description":"(ssadd [ename [ss]])  \n将对象（图元）加入到选择集中，或创建新的选择集"},
    "ssget":{"prefix":["ssget"],"body":"(ssget${0})",
        "params":[
            {"label":"[sel-method]","doc":"选择集"},
            {"label":"[pt1]","doc":"选择集"},
            {"label":"[pt2]","doc":"选择集"},
            {"label":"[pt-list]","doc":"选择集"},
            {"label":"[filter-list]","doc":"选择集"}
        ],
        "description":"(ssget [sel-method] [pt1 [pt2]] [pt-list] [filter-list])  \n根据选定对象创建选择集"},
    "ssgetfirst ":{"prefix":["ssgetfirst "],"body":"(ssgetfirst)",
        "params":[],
        "description":"(ssgetfirst)\n判断哪些对象是被选取的和被夹取的"},
    "sslength":{"prefix":["sslength"],"body":"(sslength${0})",
        "params":[
            {"label":"ss","doc":"选择集"}
        ],
        "description":"(sslength ss)  \n求出一个选择集中的对象（图元）数目，并将其作为一个整数返回"},
    "ssmemb":{"prefix":["ssmemb"],"body":"(ssmemb${0})",
        "params":[
            {"label":"ename","doc":"图元名称"},
            {"label":"ss","doc":"选择集"}
        ],
        "description":"(ssmemb ename ss)  \n测试某对象（图元）是否是选择集的成员"},
    "ssname":{"prefix":["ssname"],"body":"(ssname${0})",
        "params":[
            {"label":"ss","doc":"选择集"},
            {"label":"index","doc":"整数（或实数），指定选择集中的一个元素。选择集中的第一个元素的序号为零 (0)。要获得选择集中第 32767 个以后的图元，必须提供实数形式的 index 参数"}
        ],
        "description":"(ssname ss index)  \n返回选择集中由序号指定的那个对象（图元）的图元名"},
    "ssnamex ":{"prefix":["ssnamex"],"body":"(ssnamex${0}) ",
        "params":[
            {"label":"ss","doc":"选择集"},
            {"label":"[index]","doc":"整数（或实数），指定选择集中的一个元素。选择集中的第一个元素的序号为零 (0)。"}
        ],
        "description":"(ssnamex ss [index])  \n获取关于选择集创建方式的信息"},
    "sssetfirst ":{"prefix":["sssetfirst "],"body":"(sssetfirst${0}) ",
        "params":[
            {"label":"gripset","doc":"要夹取的选择集。如果 gripset 为 nil 且已指定 pickset，则 sssetfirst 夹取并选择 pickset。如果 gripset 为 nil 且未指定 pickset，则 sssetfirst 关闭原来打开的夹点句柄和选择集"},
            {"label":"[pickset]","doc":"将被选择的选择集"}
        ],
        "description":"(sssetfirst gripset [pickset]) \n设置哪些对象既是被选取的又是被夹取的"},
    "startapp":{"prefix":["startapp"],"body":"(startapp${0}) ",
        "params":[
            {"label":"appcmd","doc":"字符串，指定要执行的应用程序描述字串。如果 appcmd 没有包含全路径名，startapp 将按照环境变量 PATH 设置的路径来搜索该应用程序"},
            {"label":"[file]","doc":"字符串，指定要打开的文件的名称"}
        ],
        "description":"(startapp appcmd [file]) \n启动 Windows 应用程序"},
    "start_dialog":{"prefix":["start_dialog"],"body":"(start_dialog)${0}",
        "params":[

        ],
        "description":"(start_dialog)  \n显示对话框并将控制交给对话框"},
    "start_image":{"prefix":["start_image"],"body":"(start_image${0})",
        "params":[
            {"label":"key","doc":"字符串，指定对话框控件。key 参数区分大小写"}
        ],
        "description":"(start_image key)  \n开始对对话框控件中的一个图像控件进行操作"},
    "start_list":{"prefix":["start_list"],"body":"(start_list${0})",
        "params":[
            {"label":"key","doc":"字符串，指定对话框控件。key 参数区分大小写"},
            {"label":"[operation]","doc":"整数，指定要执行的列表操作的类型。可以指定下列值之一：  \n1 修改选定列表的内容  \n2 附加新的列表项  \n3 删除旧列表，创建新列表（缺省设置）"},
            {"label":"[index]","doc":"整数，指定后续 add_list 调用要修改的列表项。列表中的第一项序号为 0。如果未指定该参数，则 index 的缺省值为 0。如果 start_list 不执行修改操作，则忽略 index 参数"}
        ],
        "description":"(start_list key [operation [index]])  \n开始处理对话框中的列表框或弹出式列表框中的列表"},
    "strcase":{"prefix":["strcase"],"body":"(strcase${0}) ",
        "params":[
            {"label":"string","doc":"字符串"},
            {"label":"[which]","doc":"如果提供该参数且其值不为 nil，string 中的所有字符将被转换成小写，否则将字符转换为大写"}
        ],
        "description":"(strcase string [which])  \n将字符串中的所有字母转换成大写或小写后返回"},
    "strcat":{"prefix":["strcat"],"body":"(strcat${0}) ",
        "params":[
            {"label":"string","doc":"字符串"},
            {"label":"[2string]","doc":"字符串"},
            {"label":"[...]","doc":"字符串"}
        ],
        "description":"(strcat [string [2string]...])  \n将多个字符串拼接成一个长字符串后返回"},
    "strlen":{"prefix":["strlen"],"body":"(strlen${0})",
        "params":[
            {"label":"[string]","doc":"字符串"},
            {"label":"[...]","doc":"字符串"}
        ],
        "description":"(strlen [string]...) \n以整数形式返回一个字符串中字符的个数.如果指定多个 string 参数，strlen 返回所有参数的总长度。如果省略参数或输入空字符串，strlen 返回 0"},
    "subst":{"prefix":["subst"],"body":"(subst${0})",
        "params":[
            {"label":"newitem","doc":"原子或表"},
            {"label":"olditem","doc":"原子或表"},
            {"label":"lst","doc":"表"}
        ],
        "description":"(subst newitem olditem lst)  \n在表中搜索某旧项，并将表中出现的每一个旧项用新项代替，然后返回修改后所得的表"},
    "substr":{"prefix":["substr"],"body":"(substr${0})",
        "params":[
            {"label":"string","doc":"字符串"},
            {"label":"start","doc":"正整数，指定 string 中的开始位置。字符串中的第一个字符的位置为 1"},
            {"label":"[length]","doc":"正整数，指定在 string 中进行搜索的字符的长度。如果未指定 length，则子字符串延续到 string 的结尾"}
        ],
        "description":"(substr string start [length])\n返回字符串中的一个子字符串"},
    "tablet":{"prefix":["tablet"],"body":"(tablet${0}) ",
        "params":[],
        "description":"(tablet code [row1 row2 row3 direction]) \n获取和设置数字化仪校准"},
    "tblnext":{"prefix":["tblnext"],"body":"(tblnext${0}) ",
        "params":[],
        "description":"(tblnext table-name [rewind]) \n在符号表中查找下一项"},
    "tblobjname":{"prefix":["tblobjname"],"body":"(tblobjname${0})",
        "params":[],
        "description":"(tblobjname table-name symbol) \n返回指定符号表条目的图元名"},
    "tblsearch":{"prefix":["tblsearch"],"body":"(tblsearch${0}) ",
        "params":[],
        "description":"(tblsearch table-name symbol [setnext]) \n在指定的符号表中搜索符号名"},
    "term_dialog":{"prefix":["term_dialog"],"body":"(term_dialog)${0}",
        "params":[],
        "description":"(term_dialog)\n终止当前所有的对话框，就象用户取消了它们一样"},
    "terpri":{"prefix":["terpri"],"body":"(terpri)",
        "params":[],
        "description":"(terpri) \n在命令行上输出一个换行符"},
    "textbox":{"prefix":["textbox"],"body":"(textbox${0})",
        "params":[],
        "description":"(textbox elist)\n测量一个指定文本对象的尺寸，并返回围住该文本的一个矩形框的对角坐标"},
    "textpage":{"prefix":["textpage"],"body":"(textpage)",
        "params":[],
        "description":"(textpage) \n从图形屏幕切换至文本屏幕"},
    "trace":{"prefix":["trace"],"body":"(trace${0})",
        "params":[],
        "description":"(trace [function...])\n调试 AutoLISP 程序时的辅助函数"},
    "trans":{"prefix":["trans"],"body":"(trans${0})",
        "params":[],
        "description":"(trans pt from to [disp])   \n将一个点（或位移量）从一个坐标系转换成另一个坐标系"},
    "textscr":{"prefix":["textscr"],"body":"(textscr) ",
        "params":[],
        "description":"(textscr) \n切换至文本屏幕（相当于 AutoCAD Flip Screen 功能键）"},
    "type":{"prefix":["type"],"body":"(type${0})",
        "params":[],
        "description":"(type item)\n返回指定项的数据类型"},
    "unload_dialog":{"prefix":["unload_dialog"],"body":"(unload_dialog${0})",
        "params":[],
        "description":"(unload_dialog dcl_id)\n卸载 DCL 文件"},
    "untrace":{"prefix":["untrace"],"body":"(untrace function)",
        "params":[],
        "description":"(untrace [function...])\n清除指定函数的跟踪标志"},
    "vector_image":{"prefix":["vector_image"],"body":"(vector_image${0})",
        "params":[],
        "description":"(vector_image x1 y1 x2 y2 color)\n在当前激活的对话框图像控件上显示一个矢量线"},
    "vlisp-compile":{"prefix":["vlisp-compile"],"body":"(vlisp-compile${0})",
        "params":[],
        "description":"(vlisp-compile 'mode filename [out-filename])\n将 AutoLISP 源代码生成为 FAS 文件"},
    "ver":{"prefix":["ver"],"body":"(ver) ",
        "params":[],
        "description":"(ver) \n返回当前 AutoLISP 版本号的字符串"},
    "vports":{"prefix":["vports"],"body":"(vports) ",
        "params":[],
        "description":"(vports) \n返回表示当前视口配置的视口描述符表"},
    "wcmatch":{"prefix":["wcmatch"],"body":"(wcmatch${0}) ",
        "params":[],
        "description":"(wcmatch string pattern) \n将模式字符串与某指定的字符串进行匹配比较"},
    "while":{"prefix":["while"],"body":"(while${0}) ",
        "params":[],
        "description":"(while testexpr [expr...]) \n对测试表达式进行求值，如果它不是 nil，则执行循环体中的表达式，重复这个过程，直到测试表达式的求值结果为 nil"},
    "write-char":{"prefix":["write-char"],"body":"(write-char${0}) ",
        "params":[],
        "description":"(write-char num [file-desc]) \n将一个字符写到屏幕上或一个已打开的文件中"},
    "xdroom":{"prefix":["xdroom"],"body":"(xdroom${0})",
        "params":[],
        "description":"(xdroom ename)\n返回对象可供使用的扩展数据 (Xdata) 空间的大小"},
    "write-line":{"prefix":["write-line"],"body":"(write-line${0}) ",
        "params":[],
        "description":"(write-line string [file-desc]) \n将字符串写到屏幕上或一个已打开的文件中"},
    "xdsize":{"prefix":["xdsize"],"body":"(xdsize${0})",
        "params":[],
        "description":"(xdsize lst)\n返回一个表作为扩展数据连接到对象（图元）上时所占用的空间大小（以字节表示）"},
    "zerop":{"prefix":["zerop"],"body":"(zerop${0})",
        "params":[],
        "description":"(zerop number)\n检查一个数的值是否为 0"},
    "setvar":{"prefix":["setvar"],"body":"(setvar${0}) ",
        "params":[],
        "description":"(setvar varname value) \n设置 AutoCAD 系统变量为指定值"},
    "vl-acad-defun":{"prefix":["vl-acad-defun"],"body":"(vl-acad-defun${0})",
        "params":[],
        "description":"(vl-acad-defun ’symbol)\n将 Visual LISP 函数符号定义为外部子例程"},
    "vl-acad-undefun":{"prefix":["vl-acad-undefun"],"body":"(vl-acad-undefun${0})",
        "params":[],
        "description":"(vl-acad-undefun ’symbol)\n取消对 Visual LISP 函数符号的定义，使 ObjectARX 应用程序不能再使用它。"},
    "vl-arx-import":{"prefix":["vl-arx-import"],"body":"(vl-arx-import${0})",
        "params":[],
        "description":"(vl-arx-import [’function | \"application\"])\n将 ObjectARX/ADSRX 函数输入到独立名称空间 VLX"},
    "vl-bb-ref":{"prefix":["vl-bb-ref"],"body":"(vl-bb-ref${0}) ",
        "params":[],
        "description":"(vl-bb-ref ’variable) \n返回黑板名称空间中变量的值"},
    "vl-bb-set":{"prefix":["vl-bb-set"],"body":"(vl-bb-set${0}) ",
        "params":[],
        "description":"(vl-bb-set ’symbol value) \n设置黑板名称空间中的变量"},
    "vl-catch-all-apply":{"prefix":["vl-catch-all-apply"],"body":"(vl-catch-all-apply${0})",
        "params":[],
        "description":"(vl-catch-all-apply 'function list)\n将参数表传递给指定函数并截取错误"},
    "vl-catch-all-error-message":{"prefix":["vl-catch-all-error-message"],"body":"(vl-catch-all-error-message${0})",
        "params":[],
        "description":"(vl-catch-all-error-message error-obj)\n从错误对象返回字符串"},
    "vl-catch-all-error-p":{"prefix":["vl-catch-all-error-p"],"body":"(vl-catch-all-error-p${0})",
        "params":[],
        "description":"(vl-catch-all-error-p arg)\n确定参数是否是 vl-catch-all-apply 返回的错误对象"},
    "vl-cmdf":{"prefix":["vl-cmdf"],"body":"(vl-cmdf${0})",
        "params":[],
        "description":"(vl-cmdf  [arguments] ...)\n执行 AutoCAD 命令"},
    "vl-consp":{"prefix":["vl-consp"],"body":"(vl-consp${0}) ",
        "params":[],
        "description":"(vl-consp list-variable) \n确定表是否为 nil "},
    "vl-directory-files":{"prefix":["vl-directory-files"],"body":"(vl-directory-files${0})",
        "params":[],
        "description":"(vl-directory-files  [directory pattern directories])\n列出给定目录中的所有文件"},
    "vl-doc-export":{"prefix":["vl-doc-export"],"body":"(vl-doc-export${0}) ",
        "params":[],
        "description":"(vl-doc-export ’function) \n使函数在当前文档中可用"},
    "vl-doc-import":{"prefix":["vl-doc-import"],"body":"(vl-doc-import${0}) ",
        "params":[],
        "description":"(vl-doc-import application [’function...]) \n将早先输出的函数输入到 VLX 名称空间"},
    "vl-doc-ref":{"prefix":["vl-doc-ref"],"body":"(vl-doc-ref${0}) ",
        "params":[],
        "description":"(vl-doc-ref ’symbol) \n从当前文档名称空间中获取变量的值"},
    "vl-doc-set":{"prefix":["vl-doc-set"],"body":"(vl-doc-set${0}) ",
        "params":[],
        "description":"(vl-doc-set ’symbol value) \n设置当前文档名称空间中变量的值"},
    "vl-every ":{"prefix":["vl-every "],"body":"(vl-every${0})",
        "params":[],
        "description":"(vl-every  predicate-function list [list]...)\n检查论断结合每个元素后是否均为真"},
    "vl-exit-with-error":{"prefix":["vl-exit-with-error"],"body":"(vl-exit-with-error${0})",
        "params":[],
        "description":"(vl-exit-with-error msg)\n将控制从 VLX 错误处理器传递给调用它的名称空间的 *error* 函数"},
    "vl-exit-with-value":{"prefix":["vl-exit-with-value"],"body":"(vl-exit-with-value${0})",
        "params":[],
        "description":"(vl-exit-with-value value)\n将值返回到从其他名称空间调用 VLX 的函数"},
    "vl-file-copy":{"prefix":["vl-file-copy"],"body":"(vl-file-copy${0})",
        "params":[],
        "description":"(vl-file-copy  source-file destination-file [append])\n将一个文件的内容复制或附加到另一个文件"},
    "vl-file-delete":{"prefix":["vl-file-delete"],"body":"(vl-file-delete${0})",
        "params":[],
        "description":"(vl-file-delete  filename)\n删除文件"},
    "vl-file-rename":{"prefix":["vl-file-rename"],"body":"(vl-file-rename${0})",
        "params":[],
        "description":"(vl-file-rename  old-filename new-filename)\n重命名文件"},
    "vl-file-directory-p":{"prefix":["vl-file-directory-p"],"body":"(vl-file-directory-p filename)",
        "params":[],
        "description":"(vl-file-directory-p filename)\n确定文件名是否为路径名"},
    "vl-file-systime":{"prefix":["vl-file-systime"],"body":"(vl-file-systime${0})",
        "params":[],
        "description":"(vl-file-systime filename)\n返回指定文件的上一次修改时间"},
    "vl-file-size":{"prefix":["vl-file-size"],"body":"(vl-file-size${0})",
        "params":[],
        "description":"(vl-file-size  filename)\n确定文件的大小（字节）"},
    "vl-filename-base":{"prefix":["vl-filename-base"],"body":"(vl-filename-base${0})",
        "params":[],
        "description":"(vl-filename-base  filename)\n去掉文件的路径和扩展名，返回文件的名称"},
    "vl-filename-directory":{"prefix":["vl-filename-directory"],"body":"(vl-filename-directory${0})",
        "params":[],
        "description":"(vl-filename-directory  filename)\n去掉文件的名称和扩展名，返回文件的路径"},
    "vl-filename-extension":{"prefix":["vl-filename-extension"],"body":"(vl-filename-extension${0})",
        "params":[],
        "description":"(vl-filename-extension  filename)\n返回文件的扩展名，而去掉文件名中的其他部分"},
    "vl-filename-mktemp":{"prefix":["vl-filename-mktemp"],"body":"(vl-filename-mktemp${0})",
        "params":[],
        "description":"(vl-filename-mktemp [pattern directory extension])\n为临时文件计算唯一的文件名"},
    "vl-get-resource":{"prefix":["vl-get-resource"],"body":"(vl-get-resource${0}) ",
        "params":[],
        "description":"(vl-get-resource text-file) \n返回 VLX 中保存的 .txt 文件中的文字"},
    "vl-list-exported-functions":{"prefix":["vl-list-exported-functions"],"body":"(vl-list-exported-functions${0}) ",
        "params":[],
        "description":"(vl-list-exported-functions [appname]) \n列出输出的函数"},
    "vl-list-length":{"prefix":["vl-list-length"],"body":"(vl-list-length)",
        "params":[],
        "description":"(vl-list-length  list-or-cons-object)\n计算表的长度"},
    "vl-list-loaded-vlx":{"prefix":["vl-list-loaded-vlx"],"body":"(vl-list-loaded-vlx) ",
        "params":[],
        "description":"(vl-list-loaded-vlx) \n返回与当前文档相关联的所有独立名称空间 VLX 文件"},
    "vl-list->string":{"prefix":["vl-list->string"],"body":"(vl-list->string${0})",
        "params":[],
        "description":"(vl-list->string  char-codes-list)\n将一系列与整数表相关联的字符组合成字符串"},
    "vl-list*":{"prefix":["vl-list*"],"body":"(vl-list*${0})",
        "params":[],
        "description":"(vl-list*  object[object]...)\n构造并返回表"},
    "vl-load-all":{"prefix":["vl-load-all"],"body":"(vl-load-all${0}) ",
        "params":[],
        "description":"(vl-load-all filename) \n将文件加载到所有打开的 AutoCAD 文档中,以及在当前 AutoCAD 任务中后续打开的任何文档中"},
    "vl-load-com":{"prefix":["vl-load-com"],"body":"(vl-load-com)",
        "params":[],
        "description":"(vl-load-com)\n将 Visual LISP 扩展功能加载到 AutoLISP"},
    "vl-load-reactors":{"prefix":["vl-load-reactors"],"body":"(vl-load-reactors)",
        "params":[],
        "description":"(vl-load-reactors)\n加载反应器支持函数"},
    "vl-member-if-not":{"prefix":["vl-member-if-not"],"body":"(vl-member-if-not${0})",
        "params":[],
        "description":"(vl-member-if-not  predicate-function list)\n确定论断是否对表成员中的一个为 nil "},
    "vl-member-if":{"prefix":["vl-member-if"],"body":"(vl-member-if${0})",
        "params":[],
        "description":"(vl-member-if  predicate-functionlist)\n确定论断是否对每一个表成员都正确"},
    "vl-mkdir":{"prefix":["vl-mkdir"],"body":"(vl-mkdir${0})",
        "params":[],
        "description":"(vl-mkdir directoryname)\n创建目录"},
    "vl-position":{"prefix":["vl-position"],"body":"(vl-position${0})",
        "params":[],
        "description":"(vl-position  symbol list)\n返回指定表项目的索引"},
    "vl-prin1-to-string":{"prefix":["vl-prin1-to-string"],"body":"(vl-prin1-to-string${0})",
        "params":[],
        "description":"(vl-prin1-to-string  data)\n返回 LISP 数据的字符串表示，就象它是由 prin1 函数输出的一样"},
    "vl-princ-to-string":{"prefix":["vl-princ-to-string"],"body":"(vl-princ-to-string${0})",
        "params":[],
        "description":"(vl-princ-to-string  data)\n返回 LISP 数据的字符串表示，就象它是由 princ 函数输出的一样"},
    "vl-propagate":{"prefix":["vl-propagate"],"body":"(vl-propagate${0})",
        "params":[],
        "description":"(vl-propagate 'symbol) \n将变量的值复制到所有打开的文档名称空间（并在当前 AutoCAD 任务中打开的所有后续图形中设置它的值）"},
    "vl-registry-delete":{"prefix":["vl-registry-delete"],"body":"(vl-registry-delete${0})",
        "params":[],
        "description":"(vl-registry-delete reg-key [val-name])\n从 Winows 注册表中删除指定的主键或值"},
    "vl-registry-descendents":{"prefix":["vl-registry-descendents"],"body":"(vl-registry-descendents${0})",
        "params":[],
        "description":"(vl-registry-descendents reg-key [val-names])\n返回指定注册表键的子键或值名称的列表"},
    "vl-registry-read":{"prefix":["vl-registry-read"],"body":"(vl-registry-read${0})",
        "params":[],
        "description":"(vl-registry-read reg-key [val-name])\n对于指定的主键/值对，返回 Winodws 注册表存储的数据"},
    "vl-registry-write":{"prefix":["vl-registry-write"],"body":"(vl-registry-write${0})",
        "params":[],
        "description":"(vl-registry-write reg-key [val-name val-data])\n在 Windows 注册表中创建主键"},
    "vl-remove-if-not":{"prefix":["vl-remove-if-not"],"body":"(vl-remove-if-not${0})",
        "params":[],
        "description":"(vl-remove-if-not  predicate-function list)\n返回由所提供表中的所有能通过测试函数的元素组成的表"},
    "vl-remove-if ":{"prefix":["vl-remove-if "],"body":"(vl-remove-if${0})",
        "params":[],
        "description":"(vl-remove-if  predicate-function list)\n返回由所提供表中的所有不满足测试函数的元素组成的表"},
    "vl-remove":{"prefix":["vl-remove"],"body":"(vl-remove${0})",
        "params":[],
        "description":"(vl-remove  element-to-remove list)\n删除表中的元素"},
    "vl-sort-i":{"prefix":["vl-sort-i"],"body":"(vl-sort-i${0})",
        "params":[],
        "description":"(vl-sort-i  list comparison-function)\n根据给定的比较函数对表中的元素排序，并返回元素的索引号"},
    "vl-some":{"prefix":["vl-some"],"body":"(vl-some${0})",
        "params":[],
        "description":"(vl-some  predicate-functionlist [list]...)\n检查论断是否对某个元素组合不为 nil "},
    "vl-sort":{"prefix":["vl-sort"],"body":"(vl-sort${0})",
        "params":[],
        "description":"(vl-sort  list comparison-function)\n根据给定的比较函数来对表中的元素排序"},
    "vl-string-elt":{"prefix":["vl-string-elt"],"body":"(vl-string-elt${0})",
        "params":[],
        "description":"(vl-string-elt string position)\n返回字符串中指定位置字符的 ASCII 表示"},
    "vl-string-left-trim":{"prefix":["vl-string-left-trim"],"body":"(vl-string-left-trim${0})",
        "params":[],
        "description":"(vl-string-left-trim character-set string)\n从字符串的开始删除指定字符"},
    "vl-string-mismatch":{"prefix":["vl-string-mismatch"],"body":"(vl-string-mismatch${0})",
        "params":[],
        "description":"(vl-string-mismatch str1 str2 [pos1 pos2 ignore-case-p])\n返回两个字符串中从指定位置开始，最长的共同前缀的长度 "},
    "vl-string-position":{"prefix":["vl-string-position"],"body":"(vl-string-position${0})",
        "params":[],
        "description":"(vl-string-position char-codestr [start-pos [from]])\n在字符串中查找具有指定 ASCII 码的字符"},
    "vl-string-right-trim":{"prefix":["vl-string-right-trim"],"body":"(vl-string-right-trim${0})",
        "params":[],
        "description":"(vl-string-right-trim character-set string)\n从字符串结尾删除指定字符"},
    "vl-string-search":{"prefix":["vl-string-search"],"body":"(vl-string-search${0})",
        "params":[],
        "description":"(vl-string-search pattern string [start-pos])\n在字符串中搜索指定子串"},
    "vl-string-subst":{"prefix":["vl-string-subst"],"body":"(vl-string-subst${0})",
        "params":[],
        "description":"(vl-string-subst new-str pattern string [start-pos])\n在字符串中进行字符串替换"},
    "vl-string-translate":{"prefix":["vl-string-translate"],"body":"(vl-string-translate${0})",
        "params":[],
        "description":"(vl-string-translate source-set dest-set str)\n在字符串中替换字符"},
    "vl-string-trim":{"prefix":["vl-string-trim"],"body":"(vl-string-trim${0})",
        "params":[],
        "description":"(vl-string-trim char-set str)\n从字符串的开始和结束删除指定字符"},
    "vl-string->list":{"prefix":["vl-string->list"],"body":"(vl-string->list${0})",
        "params":[],
        "description":"(vl-string->list  string)\n将字符串转换为字符代码表"},
    "vl-symbol-name":{"prefix":["vl-symbol-name"],"body":"(vl-symbol-name${0})",
        "params":[],
        "description":"(vl-symbol-name  symbol)\n返回包含某符号名的字符串"},
    "vl-symbolp":{"prefix":["vl-symbolp"],"body":"(vl-symbolp${0})",
        "params":[],
        "description":"(vl-symbolp  object)\n确定指定对象是否为符号"},
    "vl-symbol-value":{"prefix":["vl-symbol-value"],"body":"(vl-symbol-value${0})",
        "params":[],
        "description":"(vl-symbol-value symbol)\n返回当前绑定到符号的值"},
    "vl-unload-vlx":{"prefix":["vl-unload-vlx"],"body":"(vl-unload-vlx${0}) ",
        "params":[],
        "description":"(vl-unload-vlx appname) \n卸载已经加载到自己的名称空间的 VLX 应用程序"},"vl-vbaload":{"prefix":["vl-vbaload"],"body":"(vl-vbaload${0})",
        "params":[],
        "description":"(vl-vbaload  filename)\n加载 Visual Basic 工程"},
    "vl-vbarun":{"prefix":["vl-vbarun"],"body":"(vl-vbarun${0})",
        "params":[],
        "description":"(vl-vbarun  macroname)\n运行 Visual Basic 宏"},
    "vl-vlx-loaded-p":{"prefix":["vl-vlx-loaded-p"],"body":"(vl-vlx-loaded-p${0}) ",
        "params":[],
        "description":"(vl-vlx-loaded-p appname) \n确定某独立名称空间当前是否加载"},
    
    "vlax-3D-point":{"prefix":["vlax-3D-point"],"body":"(vlax-3D-point${0}) ",
        "params":[],
        "description":"(vlax-3D-point list)\n创建与 ActiveX 兼容的（变体）三维点结构"},
    "vlax-3D-point2":{"prefix":["vlax-3D-point-2"],"body":"(vlax-3D-point${0})",
        "params":[],
        "description":" (vlax-3D-point x y [z])\n创建与 ActiveX 兼容的（变体）三维点结构"},
    
    "vlax-create-object":{"prefix":["vlax-create-object"],"body":"(vlax-create-object${0})",
        "params":[],
        "description":"(vlax-create-object prog-id)\n创建应用程序对象的新实例"},
    "vlax-curve-getArea":{"prefix":["vlax-curve-getArea"],"body":"(vlax-curve-getArea${0})",
        "params":[],
        "description":"(vlax-curve-getArea curve-obj)\n返回曲线的面积"},
    "vlax-curve-getClosestPointTo":{"prefix":["vlax-curve-getClosestPointTo"],"body":"(vlax-curve-getClosestPointTo${0})",
        "params":[],
        "description":"(vlax-curve-getClosestPointTo curve-obj givenPnt [extend])\n返回曲线上离指定点最近的点（在 WCS 上）"},
    "vlax-add-cmd":{"prefix":["vlax-add-cmd"],"body":"(vlax-add-cmd${0})",
        "params":[],
        "description":"(vlax-add-cmd global-name func-sym [local-name cmd-flags])\n将命令添加到 AutoCAD 内置命令集中"},
    "vlax-curve-getClosestPointToProjection":{"prefix":["vlax-curve-getClosestPointToProjection"],"body":"(vlax-curve-getClosestPointToProjection${0})",
        "params":[],
        "description":"(vlax-curve-getClosestPointToProjection curve-obj givenPnt normal[extend])\n在将曲线投影到平面上之后，返回曲线上的最近点（在 WCS 上）"},
    "vlax-curve-getDistAtParam":{"prefix":["vlax-curve-getDistAtParam"],"body":"(vlax-curve-getDistAtParam${0}) ",
        "params":[],
        "description":"(vlax-curve-getDistAtParam curve-objparam) \n返回曲线从开始到指定参数的曲线段的长度"},
    "vlax-curve-getEndParam":{"prefix":["vlax-curve-getEndParam"],"body":"(vlax-curve-getEndParam${0})",
        "params":[],
        "description":"(vlax-curve-getEndParam curve-obj)\n返回曲线端点的参数"},
    "vlax-curve-getEndPoint":{"prefix":["vlax-curve-getEndPoint"],"body":"(vlax-curve-getEndPoint curve-obj)",
        "params":[],
        "description":"(vlax-curve-getEndPoint curve-obj)\n返回曲线的端点（按 WCS 表示）"},
    "vlax-curve-getFirstDeriv":{"prefix":["vlax-curve-getFirstDeriv"],"body":"(vlax-curve-getFirstDeriv${0})",
        "params":[],
        "description":"(vlax-curve-getFirstDeriv curve-obj param)\n返回曲线在指定位置的第一个衍生（在 WCS 中）"},"vlax-curve-getDistAtPoint":{"prefix":["vlax-curve-getDistAtPoint"],"body":"(vlax-curve-getDistAtPoint${0})",
        "params":[],
        "description":"(vlax-curve-getDistAtPoint curve-obj point)\n返回曲线从开始点到指定点的曲线段的长度"},"vlax-curve-getParamAtDist":{"prefix":["vlax-curve-getParamAtDist"],"body":"(vlax-curve-getParamAtDist${0})",
        "params":[],
        "description":"(vlax-curve-getParamAtDist curve-obj dist)\n返回距曲线开始点为指定距离的曲线参数"},
    "vlax-curve-getParamAtPoint":{"prefix":["vlax-curve-getParamAtPoint"],"body":"(vlax-curve-getParamAtPoint${0})",
        "params":[],
        "description":"(vlax-curve-getParamAtPoint curve-obj point)\n返回曲线在指定点的参数"},"vlax-curve-getPointAtDist":{"prefix":["vlax-curve-getPointAtDist"],"body":"(vlax-curve-getPointAtDist${0})",
        "params":[],
        "description":"(vlax-curve-getPointAtDist curve-objdist)\n返回曲线上距开始点为指定距离的点（在 WCS 中）"},
    "vlax-curve-getSecondDeriv":{"prefix":["vlax-curve-getSecondDeriv"],"body":"(vlax-curve-getSecondDeriv curve-obj param)",
        "params":[],
        "description":"(vlax-curve-getSecondDeriv curve-obj param)\n返回曲线在指定位置的第二个衍生（在 WCS 中）"},
    "vlax-curve-getStartParam":{"prefix":["vlax-curve-getStartParam"],"body":"(vlax-curve-getStartParam curve-obj)",
        "params":[],
        "description":"(vlax-curve-getStartParam curve-obj)\n返回曲线的开始参数"},
    "vlax-curve-getPointAtParam":{"prefix":["vlax-curve-getPointAtParam"],"body":"(vlax-curve-getPointAtParam curve-obj param)",
        "params":[],
        "description":"(vlax-curve-getPointAtParam curve-obj param)\n返回曲线上具有指定参数值的点"},"vlax-curve-getStartPoint":{"prefix":["vlax-curve-getStartPoint"],"body":"(vlax-curve-getStartPoint curve-obj)",
        "params":[],
        "description":"(vlax-curve-getStartPoint curve-obj)\n返回曲线的开始点（在 WCS 中）"},
    "vlax-curve-isClosed":{"prefix":["vlax-curve-isClosed"],"body":"(vlax-curve-isClosed${0})",
        "params":[],
        "description":"(vlax-curve-isClosed curve-obj)\n确定指定曲线是否闭合（即起点与端点是否重合）"},
    "vlax-curve-isPeriodic":{"prefix":["vlax-curve-isPeriodic"],"body":"(vlax-curve-isPeriodic curve-obj)",
        "params":[],
        "description":"(vlax-curve-isPeriodic curve-obj)\n确定指定曲线是否在各个方向上都是无限的，同时存在一个周期值 dT，使得对于任何参数 u，都有曲线上的点 (u + dT) = 点 (u) 成立"},"vlax-dump-object":{"prefix":["vlax-dump-object"],"body":"(vlax-dump-object obj T)",
        "params":[],
        "description":"(vlax-dump-object obj [T])\n列出对象特性，也可选择列出对象的方法"},"vlax-curve-isPlanar":{"prefix":["vlax-curve-isPlanar"],"body":"(vlax-curve-isPlanar curve-obj)",
        "params":[],
        "description":"(vlax-curve-isPlanar curve-obj)\n确定是否存在包含曲线的平面"},
    "vlax-ename->vla-object":{"prefix":["vlax-ename->vla-object"],"body":"(vlax-ename->vla-object entname)",
        "params":[],
        "description":"(vlax-ename->vla-object entname)\n将 AutoLISP 类型的对象名转换为 VLA 对象"},"vlax-erased-p":{"prefix":["vlax-erased-p"],"body":"(vlax-erased-p obj)",
        "params":[],
        "description":"(vlax-erased-p obj)\n确定对象是否被删除"},"vlax-for":{"prefix":["vlax-for"],"body":"(vlax-for symbol collection expression1 expression2 )",
        "params":[],
        "description":"(vlax-for symbol collection [expression1 [expression2 ...]])\n遍历对象集，对每个表达式进行求值"},"vlax-get-acad-object":{"prefix":["vlax-get-acad-object"],"body":"(vlax-get-acad-object)",
        "params":[],
        "description":"(vlax-get-acad-object)\n检索当前 AutoCAD 任务中的顶层 AutoCAD 应用程序对象"},
    "vlax-get-object":{"prefix":["vlax-get-object"],"body":"(vlax-get-object prog-id)",
        "params":[],
        "description":"(vlax-get-object prog-id)\n返回应用程序对象的运行实例"},
    "vlax-get-or-create-object":{"prefix":["vlax-get-or-create-object"],"body":"(vlax-get-or-create-object prog-id)",
        "params":[],
        "description":"(vlax-get-or-create-object prog-id)\n返回应用程序对象的运行实例。如果应用程序当前未运行，则创建新实例"},
    "vlax-import-type-library":{"prefix":["vlax-import-type-library"],"body":"(vlax-import-type-library :tlb-filename filename :methods-prefix mprefix  :properties-prefix pprefix :constants-prefix cprefix)",
        "params":[],
        "description":"(vlax-import-type-library :tlb-filename filename [:methods-prefix mprefix  :properties-prefix pprefix :constants-prefix cprefix])\n从类型库中输出信息"},"vlax-invoke-method":{"prefix":["vlax-invoke-method"],"body":"(vlax-invoke-method obj method arg arg)",
        "params":[],
        "description":"(vlax-invoke-method obj method arg [arg...])\n调用指定的 ActiveX 方法"},"vlax-get-property":{"prefix":["vlax-get-property"],"body":"(vlax-get-property object property)",
        "params":[],
        "description":"(vlax-get-property object property)\n检索 VLA 对象的特性"},"vlax-ldata-delete":{"prefix":["vlax-ldata-delete"],"body":"(vlax-ldata-delete dict key private)",
        "params":[],
        "description":"(vlax-ldata-delete dict key [private])\n从图形词典中删除 LISP 数据"},
    "vlax-ldata-get":{"prefix":["vlax-ldata-get"],"body":"(vlax-ldata-get dict key default-data private)",
        "params":[],
        "description":"(vlax-ldata-get dict key [default-data] [private])\n在图形词典或对象中检索 LISP 数据"},"vlax-ldata-put":{"prefix":["vlax-ldata-put"],"body":"(vlax-ldata-put dict key data private)",
        "params":[],
        "description":"(vlax-ldata-put dict key data [private])\n存储图形词典或对象中的 LISP 数据"},
    "vlax-ldata-list":{"prefix":["vlax-ldata-list"],"body":"(vlax-ldata-list dict private)",
        "params":[],
        "description":"(vlax-ldata-list dict [private])\n列出图形词典中的 LISP 数据"},
    "vlax-make-safearray":{"prefix":["vlax-make-safearray"],"body":"(vlax-make-safearray type ’(l-bound . u-bound) ’(l-bound . u-bound))",
        "params":[],
        "description":"(vlax-make-safearray type ’(l-bound . u-bound) [’(l-bound . u-bound)...)]\n创建 SafeArray"},
    "vlax-make-variant":{"prefix":["vlax-make-variant"],"body":"(vlax-make-variant value type)",
        "params":[],
        "description":"(vlax-make-variant [value] [type])\n创建变体数据类型"},"vlax-ldata-test":{"prefix":["vlax-ldata-test"],"body":"(vlax-ldata-test data)",
        "params":[],
        "description":"(vlax-ldata-test data)\n确定数据是否能越任务边界保存"},
    "vlax-map-collection":{"prefix":["vlax-map-collection"],"body":"(vlax-map-collection objfunction)",
        "params":[],
        "description":"(vlax-map-collection objfunction)\n将函数应用到集合中的所有对象"},
    "vlax-object-released-p":{"prefix":["vlax-object-released-p"],"body":"(vlax-object-released-p${0})",
        "params":[],
        "description":"(vlax-object-released-p obj)\n确定对象是否已被释放"},
    "vlax-method-applicable-p":{"prefix":["vlax-method-applicable-p"],"body":"(vlax-method-applicable-p objmethod)",
        "params":[],
        "description":"(vlax-method-applicable-p objmethod)\n确定对象是否支持某个方法"},"vlax-product-key":{"prefix":["vlax-product-key"],"body":"(vlax-product-key)",
        "params":[],
        "description":"(vlax-product-key)\n返回 AutoCAD 的 Window 注册表路径"},"vlax-property-available-p":{"prefix":["vlax-property-available-p"],"body":"(vlax-property-available-p${0})",
        "params":[],
        "description":"(vlax-property-available-p obj prop [check-modify])\n确定对象是否具有指定特性"},"vlax-put-property":{"prefix":["vlax-put-property"],"body":"(vlax-put-property${0})",
        "params":[],
        "description":"(vlax-put-property obj property arg)\n设置 ActiveX 对象的特性"},
    "vlax-read-enabled-p":{"prefix":["vlax-read-enabled-p"],"body":"(vlax-read-enabled-p${0})",
        "params":[],
        "description":"(vlax-read-enabled-p obj)\n确定对象是否可读"},
    "vlax-release-object":{"prefix":["vlax-release-object"],"body":"(vlax-release-object${0})",
        "params":[],
        "description":"(vlax-release-object obj)\n释放图形对象"},"vlax-remove-cmd":{"prefix":["vlax-remove-cmd"],"body":"(vlax-remove-cmd${0})",
        "params":[],
        "description":"(vlax-remove-cmd global-name)\n删除一个命令或一组命令"},
    "vlax-safearray-fill":{"prefix":["vlax-safearray-fill"],"body":"(vlax-safearray-fill${0})",
        "params":[],
        "description":"(vlax-safearray-fill var 'element-values)\n在 SafeArray 的元素中存储数据"},"vlax-safearray-get-dim":{"prefix":["vlax-safearray-get-dim"],"body":"(vlax-safearray-get-dim${0})",
        "params":[],
        "description":"(vlax-safearray-get-dim var)\n返回 SafeArray 对象的维数"},
    "vlax-safearray-get-element":{"prefix":["vlax-safearray-get-element"],"body":"(vlax-safearray-get-element${0})",
        "params":[],
        "description":"(vlax-safearray-get-element var element...)\n返回 Safearray 中的元素"},"vlax-safearray-get-u-bound":{"prefix":["vlax-safearray-get-u-bound"],"body":"(vlax-safearray-get-u-bound${0})",
        "params":[],
        "description":"(vlax-safearray-get-u-bound var dim)\n返回 Safearray 某一维的上界（结束索引）"},
    "vlax-safearray-get-l-bound":{"prefix":["vlax-safearray-get-l-bound"],"body":"(vlax-safearray-get-l-bound${0})",
        "params":[],
        "description":"(vlax-safearray-get-l-bound var dim)\n返回 Safearray 某一维的下界（开始索引）"},"vlax-safearray-put-element":{"prefix":["vlax-safearray-put-element"],"body":"(vlax-safearray-put-element${0})",
        "params":[],
        "description":"(vlax-safearray-put-element var index... value)\n给 Safearray 中的某元素赋值"},"vlax-safearray-type":{"prefix":["vlax-safearray-type"],"body":"(vlax-safearray-type${0})",
        "params":[],
        "description":"(vlax-safearray-type var)\n返回 SafeArray 的数据类型"},"vlax-safearray->list":{"prefix":["vlax-safearray->list"],"body":"(vlax-safearray->list${0})",
        "params":[],
        "description":"(vlax-safearray->list var)\n以表的形式返回 SafeArray 中的元素"},"vlax-typeinfo-available-p":{"prefix":["vlax-typeinfo-available-p"],"body":"(vlax-typeinfo-available-p${0})",
        "params":[],
        "description":"(vlax-typeinfo-available-p obj)\n确定在指定类型的对象中是否存在 TypeLib 信息"},"vlax-variant-change-type":{"prefix":["vlax-variant-change-type"],"body":"(vlax-variant-change-type${0})",
        "params":[],
        "description":"(vlax-variant-change-type var type)\n在改变变体的数据类型后返回该变体的值"},"vlax-variant-type":{"prefix":["vlax-variant-type"],"body":"(vlax-variant-type${0})",
        "params":[],
        "description":"(vlax-variant-type var)\n确定变体的数据类型"},"vlax-tmatrix":{"prefix":["vlax-tmatrix"],"body":"(vlax-tmatrix${0})",
        "params":[],
        "description":"(vlax-tmatrix list)\n返回 VLA 方法可用的 4x4 转换矩阵的适当表示"},"vlax-variant-value":{"prefix":["vlax-variant-value"],"body":"(vlax-variant-value${0})",
        "params":[],
        "description":"(vlax-variant-value var)\n返回变体的值"},"vlax-vla-object->ename":{"prefix":["vlax-vla-object->ename"],"body":"(vlax-vla-object->ename${0})",
        "params":[],
        "description":"(vlax-vla-object->ename obj)\n将 VLA 对象转换为 AutoLISP 对象名"},"vlax-write-enabled-p":{"prefix":["vlax-write-enabled-p"],"body":"(vlax-write-enabled-p${0})",
        "params":[],
        "description":"(vlax-write-enabled-p obj)\n确定是否能够修改 AutoCAD 图形"},"align":{"prefix":["align"],"body":"(align${0}) ",
        "params":[],
        "description":"(align arg1 arg2 ...) \n平移和旋转对象，使它们与其他对象对齐（外部定义：geom3d ARX 应用程序）  \n\n\n\n\n"},"3dsin":{"prefix":["3dsin"],"body":"(c:3dsin mode multimat create file)",
        "params":[],
        "description":"(c:3dsin mode [multimat create] file)\n输入 3D Studio (.3ds) 文件（外部定义：render ARX 应用程序）  \n\n\n\n\n"},"3dsout":{"prefix":["3dsout"],"body":"(c:3dsout sset omode div smooth weld file)",
        "params":[],
        "description":"(c:3dsout sset omode div smooth weld file)\n输出 3D Studio 文件（外部定义：render ARX 应用程序）  \n\n\n\n\n"},"cal":{"prefix":["cal"],"body":"(c:cal expression) ",
        "params":[],
        "description":"(c:cal expression) \n调用联机的几何图形计算器并返回表达式的值（外部定义：geomcal ARX 应用程序）  \n\n\n\n\n"},"fog":{"prefix":["fog"],"body":"(c:fog enabled color near_dist far_dist near_percent far_percent background)",
        "params":[],
        "description":"(c:fog enabled [color [near_dist [far_dist [near_percent [far_percent [background]]]]]])\n加大对象与相机之间的距离（外部定义：render ARX 应用程序）  \n\n\n\n\n"},"light":{"prefix":["light"],"body":"(c:light mode options)",
        "params":[],
        "description":"(c:light mode [options])\n创建、修改和删除光源和照明效果（外部定义：render ARX 应用程序）   \n"},"lslib":{"prefix":["lslib"],"body":"(c:lslib mode options)",
        "params":[],
        "description":"(c:lslib mode [options])\n管理配景库（外部定义：render ARX 应用程序）"},
    "lsedit":{"prefix":["lsedit"],"body":"(c:lsedit mode options)",
        "params":[],
        "description":"(c:lsedit mode [options])\n创建或修改配景对象（外部定义：render ARX 应用程序）"},
    "lsnew":{"prefix":["lsnew"],"body":"(c:lsnew object-type height position alignment)",
        "params":[],
        "description":"(c:lsnew object-type height position alignment)\n创建配景对象（外部定义：render ARX 应用程序）"},"matlib":{"prefix":["matlib"],"body":"(c:matlib mode name file)",
        "params":[],
        "description":"(c:matlib mode name [file])\n管理材质库（外部定义：render ARX 应用程序）"},
    "render":{"prefix":["render"],"body":"(c:render${0}) ",
        "params":[],
        "description":"(c:render [filename|point1 point2]) \n用几何图形、光源和表面修饰信息创建三维线框模型的真实感着色图像（外部定义：render ARX 应用程序）"},"renderupdate":{"prefix":["renderupdate"],"body":"(c:renderupdate${0}) ",
        "params":[],
        "description":"(c:renderupdate [RU_value]) \n在下一次渲染时生成 en2face 文件（外部定义：render ARX 应用程序）"},
    "replay":{"prefix":["replay"],"body":"(c:replay${0})",
        "params":[],
        "description":"(c:replay filename type [xoff yoff xsize ysize])\n显示 BMP、TGA 或 TIFF 图像（外部定义：render ARX 应用程序）"},"rmat":{"prefix":["rmat"],"body":"(c:rmat${0})",
        "params":[],
        "description":"(c:rmat mode options)\n创建、编辑、附着和拆离渲染材质（外部定义：render ARX 应用程序）"},
    "rpref":{"prefix":["rpref"],"body":"(c:rpref${0})",
        "params":[],
        "description":"(c:rpref mode option [setting])\n设置渲染系统配置（外部定义：render ARX 应用程序）"},"saveimg":{"prefix":["saveimg"],"body":"(c:saveimg${0})",
        "params":[],
        "description":"(c:saveimg filename type [portion] [xoff yoff xsize ysize] [compression])\n将渲染图形保存到 BMP、TGA 或 TIFF 格式的文件中（外部定义：render ARX 应用程序）"},
    "scene":{"prefix":["scene"],"body":"(c:scene${0})",
        "params":[],
        "description":"(c:scene mode [options])\n（仅适用于图纸空间）创建新场景，修改或删除现有的场景（外部定义：render ARX 应用程序）"},
    "setuv":{"prefix":["setuv"],"body":"(c:setuv${0})",
        "params":[],
        "description":"(c:setuv modeoptions)\n向选定对象指定材质贴图坐标，此函数有两种模式，由字符串参数指定（外部定义：render ARX 应用程序）"},
    "showmat":{"prefix":["showmat"],"body":"(c:showmat${0})",
        "params":[],
        "description":"(c:showmat arg1)\n列出选定对象的材质类型和附着方法（外部定义：render ARX 应用程序）"},
    "stats":{"prefix":["stats"],"body":"(c:stats${0}) ",
        "params":[],
        "description":"(c:stats [filename |nil]) \n显示上一次渲染的统计信息（外部定义：render ARX 应用程序）"},"solprof":{"prefix":["solprof"],"body":"(c:solprof args )",
        "params":[],
        "description":"(c:solprof args ...)\n创建三维实体的剖面图像（外部定义：solids ARX 应用程序）"},"mirror3d":{"prefix":["mirror3d"],"body":"(mirror3d arg1 arg2 ) ",
        "params":[],
        "description":"(mirror3d arg1 arg2 ...) \n相对于用户指定的平面反射选定的对象（外部定义：geom3d ARX 应用程序）"},"rotate3d":{"prefix":["rotate3d"],"body":"(rotate3d args ) ",
        "params":[],
        "description":"(rotate3d args ...) \n绕任意三维轴旋转对象（外部定义：geom3d ARX 应用程序）"},"vlr-acdb-reactor":{"prefix":["vlr-acdb-reactor"],"body":"(vlr-acdb-reactor data callbacks)",
        "params":[],
        "description":"(vlr-acdb-reactor data callbacks)\n构造 AutoCAD 数据库反应器对象，在从图形数据库中加入、修改或删除对象时通知应用程序"},"vlr-add":{"prefix":["vlr-add"],"body":"(vlr-add obj)",
        "params":[],
        "description":"(vlr-add obj)\n启动当前禁用的反应器对象"},
    "vlr-added-p":{"prefix":["vlr-added-p"],"body":"(vlr-added-p obj)",
        "params":[],
        "description":"(vlr-added-p obj)\n测试以确定是否已启用反应器对象"},
    "vlr-beep-reaction":{"prefix":["vlr-beep-reaction"],"body":"(vlr-beep-reaction args)",
        "params":[],
        "description":"(vlr-beep-reaction [args])\n产生声音提示的回调函数"},"vlr-command-reactor":{"prefix":["vlr-command-reactor"],"body":"(vlr-command-reactor data callbacks)",
        "params":[],
        "description":"(vlr-command-reactor data callbacks)\n构造 AutoCAD 命令反应器，对命令事件给出通知"},
    "vlr-current-reaction-name":{"prefix":["vlr-current-reaction-name"],"body":"(vlr-current-reaction-name)",
        "params":[],
        "description":"(vlr-current-reaction-name)\n如果在反应器回调函数中调用该函数，它返回当前事件的名称（符号）"},
    "vlr-data-set":{"prefix":["vlr-data-set"],"body":"(vlr-data-set objdata)",
        "params":[],
        "description":"(vlr-data-set objdata)\n覆盖与反应器相关的应用程序特定数据"},"vlr-data":{"prefix":["vlr-data"],"body":"(vlr-data obj)",
        "params":[],
        "description":"(vlr-data obj)\n返回与反应器相关的应用程序特定数据"},
    "vlr-deepclone-reactor":{"prefix":["vlr-deepclone-reactor"],"body":"(vlr-deepclone-reactor datacallbacks)",
        "params":[],
        "description":"(vlr-deepclone-reactor datacallbacks)\n构造编辑器反应器对象，在发生 deepclone 事件时给出通知"},"vlr-docmanager-reactor":{"prefix":["vlr-docmanager-reactor"],"body":"(vlr-docmanager-reactor data callbacks)",
        "params":[],
        "description":"(vlr-docmanager-reactor data callbacks)\n构造反应器对象，通知与图形文档相关的事件"},
    "vlr-dwg-reactor":{"prefix":["vlr-dwg-reactor"],"body":"(vlr-dwg-reactor data callbacks)",
        "params":[],
        "description":"(vlr-dwg-reactor data callbacks)\n构造反应器对象，通知图形事件（如打开或关闭图形文件）"},
    "vlr-dxf-reactor":{"prefix":["vlr-dxf-reactor"],"body":"(vlr-dxf-reactor datacallbacks)",
        "params":[],
        "description":"(vlr-dxf-reactor datacallbacks)\n构造编辑器反应器对象，通知与读写 DXF 文件相关的事件"},
    "vlr-editor-reactor":{"prefix":["vlr-editor-reactor"],"body":"(vlr-editor-reactor data callbacks)",
        "params":[],
        "description":"(vlr-editor-reactor data callbacks)\n构造编辑器反应器对象"},
    "vlr-insert-reactor":{"prefix":["vlr-insert-reactor"],"body":"(vlr-insert-reactor data callbacks)",
        "params":[],
        "description":"(vlr-insert-reactor data callbacks)\n构造反应器对象，通知与块插入相关的事件"},
    "vlr-lisp-reactor":{"prefix":["vlr-lisp-reactor"],"body":"(vlr-lisp-reactor data callbacks)",
        "params":[],
        "description":"(vlr-lisp-reactor data callbacks)\n构造编辑器反应器对象，通知 LISP 事件"},
    "vlr-miscellaneous-reactor":{"prefix":["vlr-miscellaneous-reactor"],"body":"(vlr-miscellaneous-reactor data callbacks)",
        "params":[],
        "description":"(vlr-miscellaneous-reactor data callbacks)\n构造编辑器反应器对象，它不属于任何其他编辑器反应器类型"},
    "vlr-linker-reactor":{"prefix":["vlr-linker-reactor"],"body":"(vlr-linker-reactor data callbacks)",
        "params":[],
        "description":"(vlr-linker-reactor data callbacks)\n构造反应器对象，在每次应用程序加载或卸载 ObjectARX 应用程序时通知应用程序"},
    "vlr-mouse-reactor":{"prefix":["vlr-mouse-reactor"],"body":"(vlr-mouse-reactor data callbacks)",
        "params":[],
        "description":"(vlr-mouse-reactor data callbacks)\n构造编辑器反应器对象，通知鼠标事件（如双击）"},
    "vlr-object-reactor":{"prefix":["vlr-object-reactor"],"body":"(vlr-object-reactor${0})",
        "params":[],
        "description":"(vlr-object-reactor owners data callbacks)\n构造对象反应器对象"},
    "vlr-owner-add":{"prefix":["vlr-owner-add"],"body":"(vlr-owner-add${0})",
        "params":[],
        "description":"(vlr-owner-add reactor owner)\n将对象添加到对象反应器的所有者列表"},
    "vlr-notification":{"prefix":["vlr-notification"],"body":"(vlr-notification${0})",
        "params":[],
        "description":"(vlr-notification reactor)\n确定当反应器相关联的名称空间不在活动状态时是否激发反应器"},
    "vlr-owners":{"prefix":["vlr-owners"],"body":"(vlr-owners${0})",
        "params":[],
        "description":"(vlr-owners reactor)\n返回对象反应器的所有者列表"},
    "vlr-owner-remove":{"prefix":["vlr-owner-remove"],"body":"(vlr-owner-remove${0})",
        "params":[],
        "description":"(vlr-owner-remove reactor owner)\n从对象反应器的所有者列表中删除对象"},
    "vlr-pers-list":{"prefix":["vlr-pers-list"],"body":"(vlr-pers-list${0})",
        "params":[],
        "description":"(vlr-pers-list [reactor])\n返回由当前图形文档中永久反应器组成的表"},
    "vlr-pers-release":{"prefix":["vlr-pers-release"],"body":"(vlr-pers-release${0})",
        "params":[],
        "description":"(vlr-pers-release reactor)\n使反应器成为临时反应器"},
    "vlr-pers":{"prefix":["vlr-pers"],"body":"(vlr-pers${0})",
        "params":[],
        "description":"(vlr-pers reactor)\n使反应器成为永久反应器"},
    "vlr-pers-p":{"prefix":["vlr-pers-p"],"body":"(vlr-pers-p${0})",
        "params":[],
        "description":"(vlr-pers-p reactor)\n确定反应器是否是永久反应器"},
    "vlr-reaction-set":{"prefix":["vlr-reaction-set"],"body":"(vlr-reaction-set${0})",
        "params":[],
        "description":"(vlr-reaction-set reactor event function)\n添加或替换反应器中的一个回调函数"},
    "vlr-reaction-name":{"prefix":["vlr-reaction-name"],"body":"(vlr-reaction-names${0})",
        "params":[],
        "description":"(vlr-reaction-names reactor-type)\n返回由该类型反应器所有可能回调条件组成的表"},
    "vlr-reactors":{"prefix":["vlr-reactors"],"body":"(vlr-reactors${0})",
        "params":[],
        "description":"(vlr-reactors [reactor-type...])\n返回由现有反应器组成的表"},"vlr-reactions":{"prefix":["vlr-reactions"],"body":"(vlr-reactions${0})",
        "params":[],
        "description":"(vlr-reactions reactor)\n返回反应器的形如 (event-name . callback_function) 的点对表"},
    "vlr-remove-all":{"prefix":["vlr-remove-all"],"body":"(vlr-remove-all${0})",
        "params":[],
        "description":"(vlr-remove-all [reactor-type])\n禁用指定类型的所有反应器"},"vlr-set-notification":{"prefix":["vlr-set-notification"],"body":"(vlr-set-notification${0})",
        "params":[],
        "description":"(vlr-set-notification reactor 'range)\n确定当相关联的名称空间不在活动状态时是否执行反应器回调函数"},"vlr-remove":{"prefix":["vlr-remove"],"body":"(vlr-remove${0})",
        "params":[],
        "description":"(vlr-remove reactor)\n禁用反应器"},
    "vlr-sysvar-reactor":{"prefix":["vlr-sysvar-reactor"],"body":"(vlr-sysvar-reactor${0})",
        "params":[],
        "description":"(vlr-sysvar-reactor data callbacks)\n构造编辑器反应器对象，在修改系统变量时通知应用程序"},
    "vlr-toolbar-reactor":{"prefix":["vlr-toolbar-reactor"],"body":"(vlr-toolbar-reactor${0})",
        "params":[],
        "description":"(vlr-toolbar-reactor data callbacks)\n构造编辑器反应器对象，在工具栏中的位图改变时通知应用程序"},
    "vlr-type":{"prefix":["vlr-type"],"body":"(vlr-type${0})",
        "params":[],
        "description":"(vlr-type reactor)\n返回代表反应器类型的符号"},
    "vlr-types":{"prefix":["vlr-types"],"body":"(vlr-types)",
        "params":[],
        "description":"(vlr-types)\n返回由所有反应器类型组成的表"},
    "vlr-trace-reaction":{"prefix":["vlr-trace-reaction"],"body":"(vlr-trace-reaction)",
        "params":[],
        "description":"(vlr-trace-reaction)\n预定义回调函数，在“跟踪”窗口显示一个或多个回调参数"},
    "vlr-wblock-reactor":{"prefix":["vlr-wblock-reactor"],"body":"(vlr-wblock-reactor${0})",
        "params":[],
        "description":"(vlr-wblock-reactor data callbacks)\n构造编辑器反应器对象，在发生与写块相关的事件时通知应用程序"},
    "vlr-undo-reactor":{"prefix":["vlr-undo-reactor"],"body":"(vlr-undo-reactor${0})",
        "params":[],
        "description":"(vlr-undo-reactor data callbacks)\n构造通知放弃操作的编辑器反应器"},
    "vlr-xref-reactor":{"prefix":["vlr-xref-reactor"],"body":"(vlr-xref-reactor${0})",
        "params":[],
        "description":"(vlr-xref-reactor data callbacks)\n构造编辑器反应器对象，在发生附着或修改外部参照事件时通知应用程序"},
    "vlr-window-reactor":{"prefix":["vlr-window-reactor"],"body":"(vlr-window-reactor${0})",
        "params":[],
        "description":"(vlr-window-reactor data callbacks)\n构造编辑器反应器对象，在发生与移动或缩放 AutoCAD 窗口相关的事件时通知应用程序"}
}